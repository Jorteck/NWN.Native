//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NWN.Native.API {

public class CNWTileSurfaceMesh : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public CNWTileSurfaceMesh(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CNWTileSurfaceMesh obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CNWTileSurfaceMesh() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NWNXLibPINVOKE.delete_CNWTileSurfaceMesh(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public System.IntPtr Pointer {
    get {
      return swigCPtr.Handle;
    }
  }

  public bool Equals(CNWTileSurfaceMesh other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }

    if (ReferenceEquals(this, other)) {
      return true;
    }

    return Pointer.Equals(other.Pointer);
  }

  public override bool Equals(object obj) {
    return ReferenceEquals(this, obj) || obj is CNWTileSurfaceMesh other && Equals(other);
  }

  public override int GetHashCode() {
    return swigCPtr.Handle.GetHashCode();
  }

  public static bool operator ==(CNWTileSurfaceMesh left, CNWTileSurfaceMesh right) {
    return Equals(left, right);
  }

  public static bool operator !=(CNWTileSurfaceMesh left, CNWTileSurfaceMesh right) {
    return !Equals(left, right);
  }

  public CResRef m_cWalkMesh {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_cWalkMesh_set(swigCPtr, CResRef.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_cWalkMesh_get(swigCPtr);
      CResRef ret = (cPtr == global::System.IntPtr.Zero) ? null : new CResRef(cPtr, false);
      return ret;
    } 
  }

  public byte m_nPathNode {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_nPathNode_set(swigCPtr, value);
    } 
    get {
      byte ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_nPathNode_get(swigCPtr);
      return ret;
    } 
  }

  public int m_nPathNodeOrientation {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_nPathNodeOrientation_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_nPathNodeOrientation_get(swigCPtr);
      return ret;
    } 
  }

  public byte m_nVisibilityNode {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_nVisibilityNode_set(swigCPtr, value);
    } 
    get {
      byte ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_nVisibilityNode_get(swigCPtr);
      return ret;
    } 
  }

  public int m_nVisibilityNodeOrientation {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_nVisibilityNodeOrientation_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_nVisibilityNodeOrientation_get(swigCPtr);
      return ret;
    } 
  }

  public byte m_nDoorVisNode {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_nDoorVisNode_set(swigCPtr, value);
    } 
    get {
      byte ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_nDoorVisNode_get(swigCPtr);
      return ret;
    } 
  }

  public int m_nDoorVisNodeOrientation {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_nDoorVisNodeOrientation_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_nDoorVisNodeOrientation_get(swigCPtr);
      return ret;
    } 
  }

  public int m_nTileConnectivity {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_nTileConnectivity_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_nTileConnectivity_get(swigCPtr);
      return ret;
    } 
  }

  public int m_nVertices {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_nVertices_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_nVertices_get(swigCPtr);
      return ret;
    } 
  }

  public int m_nVerticesLayer1 {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_nVerticesLayer1_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_nVerticesLayer1_get(swigCPtr);
      return ret;
    } 
  }

  public int m_nVerticesLayer2 {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_nVerticesLayer2_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_nVerticesLayer2_get(swigCPtr);
      return ret;
    } 
  }

  public int m_nVerticesLayer3 {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_nVerticesLayer3_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_nVerticesLayer3_get(swigCPtr);
      return ret;
    } 
  }

  public int m_nTriangles {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_nTriangles_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_nTriangles_get(swigCPtr);
      return ret;
    } 
  }

  public int m_nTrianglesLayer1 {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_nTrianglesLayer1_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_nTrianglesLayer1_get(swigCPtr);
      return ret;
    } 
  }

  public int m_nTrianglesLayer2 {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_nTrianglesLayer2_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_nTrianglesLayer2_get(swigCPtr);
      return ret;
    } 
  }

  public int m_nTrianglesLayer3 {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_nTrianglesLayer3_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_nTrianglesLayer3_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_int m_pnTriangles {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pnTriangles_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pnTriangles_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int m_pnTrianglesLayer1 {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pnTrianglesLayer1_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pnTrianglesLayer1_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int m_pnTrianglesLayer2 {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pnTrianglesLayer2_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pnTrianglesLayer2_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int m_pnTrianglesLayer3 {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pnTrianglesLayer3_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pnTrianglesLayer3_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int m_pnTriangleMaterial {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pnTriangleMaterial_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pnTriangleMaterial_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_float m_pfTriangleDistances {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pfTriangleDistances_set(swigCPtr, SWIGTYPE_p_float.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pfTriangleDistances_get(swigCPtr);
      SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
      return ret;
    } 
  }

  public Vector m_pvTriangleNormals {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pvTriangleNormals_set(swigCPtr, Vector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pvTriangleNormals_get(swigCPtr);
      Vector ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int m_pnTAdjacency {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pnTAdjacency_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pnTAdjacency_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int m_pnTAdjacencyLayer1 {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pnTAdjacencyLayer1_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pnTAdjacencyLayer1_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int m_pnTAdjacencyLayer2 {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pnTAdjacencyLayer2_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pnTAdjacencyLayer2_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int m_pnTAdjacencyLayer3 {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pnTAdjacencyLayer3_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pnTAdjacencyLayer3_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_float m_pfVertices {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pfVertices_set(swigCPtr, SWIGTYPE_p_float.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pfVertices_get(swigCPtr);
      SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_float m_pfVerticesLayer1 {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pfVerticesLayer1_set(swigCPtr, SWIGTYPE_p_float.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pfVerticesLayer1_get(swigCPtr);
      SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_float m_pfVerticesLayer2 {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pfVerticesLayer2_set(swigCPtr, SWIGTYPE_p_float.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pfVerticesLayer2_get(swigCPtr);
      SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_float m_pfVerticesLayer3 {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pfVerticesLayer3_set(swigCPtr, SWIGTYPE_p_float.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pfVerticesLayer3_get(swigCPtr);
      SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
      return ret;
    } 
  }

  public int m_nDeniedVertices {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_nDeniedVertices_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_nDeniedVertices_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_float m_pfDeniedVertices {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pfDeniedVertices_set(swigCPtr, SWIGTYPE_p_float.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pfDeniedVertices_get(swigCPtr);
      SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
      return ret;
    } 
  }

  public int m_nDeniedTriangles {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_nDeniedTriangles_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_nDeniedTriangles_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_int m_pnDeniedTriangles {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pnDeniedTriangles_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pnDeniedTriangles_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int m_pnDeniedTriangleMaterial {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pnDeniedTriangleMaterial_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pnDeniedTriangleMaterial_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_float m_pfDeniedTriangleDistances {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pfDeniedTriangleDistances_set(swigCPtr, SWIGTYPE_p_float.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pfDeniedTriangleDistances_get(swigCPtr);
      SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
      return ret;
    } 
  }

  public Vector m_pvDeniedTriangleNormals {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pvDeniedTriangleNormals_set(swigCPtr, Vector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pvDeniedTriangleNormals_get(swigCPtr);
      Vector ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector(cPtr, false);
      return ret;
    } 
  }

  public CNWTileSurfaceMeshAABBNode m_pAABBTree {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pAABBTree_set(swigCPtr, CNWTileSurfaceMeshAABBNode.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pAABBTree_get(swigCPtr);
      CNWTileSurfaceMeshAABBNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWTileSurfaceMeshAABBNode(cPtr, false);
      return ret;
    } 
  }

  public float m_fGoalTargetX {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_fGoalTargetX_set(swigCPtr, value);
    } 
    get {
      float ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_fGoalTargetX_get(swigCPtr);
      return ret;
    } 
  }

  public float m_fGoalMinX {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_fGoalMinX_set(swigCPtr, value);
    } 
    get {
      float ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_fGoalMinX_get(swigCPtr);
      return ret;
    } 
  }

  public float m_fGoalMaxX {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_fGoalMaxX_set(swigCPtr, value);
    } 
    get {
      float ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_fGoalMaxX_get(swigCPtr);
      return ret;
    } 
  }

  public float m_fGoalTargetY {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_fGoalTargetY_set(swigCPtr, value);
    } 
    get {
      float ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_fGoalTargetY_get(swigCPtr);
      return ret;
    } 
  }

  public float m_fGoalMinY {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_fGoalMinY_set(swigCPtr, value);
    } 
    get {
      float ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_fGoalMinY_get(swigCPtr);
      return ret;
    } 
  }

  public float m_fGoalMaxY {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_fGoalMaxY_set(swigCPtr, value);
    } 
    get {
      float ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_fGoalMaxY_get(swigCPtr);
      return ret;
    } 
  }

  public int m_nGoalTargetTriangle {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_nGoalTargetTriangle_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_nGoalTargetTriangle_get(swigCPtr);
      return ret;
    } 
  }

  public float m_fGoalMaximumDistance {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_fGoalMaximumDistance_set(swigCPtr, value);
    } 
    get {
      float ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_fGoalMaximumDistance_get(swigCPtr);
      return ret;
    } 
  }

  public int m_nIntraTileWPLength {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_nIntraTileWPLength_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_nIntraTileWPLength_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_float m_pfIntraTileWayPoints {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pfIntraTileWayPoints_set(swigCPtr, SWIGTYPE_p_float.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pfIntraTileWayPoints_get(swigCPtr);
      SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
      return ret;
    } 
  }

  public int m_nIntraTileTriangles {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_nIntraTileTriangles_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_nIntraTileTriangles_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_int m_pnIntraTileTriangle {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pnIntraTileTriangle_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pnIntraTileTriangle_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public int m_nIntraTileUnits {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_nIntraTileUnits_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_nIntraTileUnits_get(swigCPtr);
      return ret;
    } 
  }

  public int m_nMaxIntraTileUnits {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_nMaxIntraTileUnits_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_nMaxIntraTileUnits_get(swigCPtr);
      return ret;
    } 
  }

  public float m_fMinEstimateToGoal {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_fMinEstimateToGoal_set(swigCPtr, value);
    } 
    get {
      float ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_fMinEstimateToGoal_get(swigCPtr);
      return ret;
    } 
  }

  public CNWTileSurfaceMeshHashTableEntry m_pcIntraTileHashTable {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pcIntraTileHashTable_set(swigCPtr, CNWTileSurfaceMeshHashTableEntry.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pcIntraTileHashTable_get(swigCPtr);
      CNWTileSurfaceMeshHashTableEntry ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWTileSurfaceMeshHashTableEntry(cPtr, false);
      return ret;
    } 
  }

  public CNWTileSurfaceMeshLocalInfo m_pcIntraTileGenSuccessorsLocalInfo {
    set {
      NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pcIntraTileGenSuccessorsLocalInfo_set(swigCPtr, CNWTileSurfaceMeshLocalInfo.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWTileSurfaceMesh_m_pcIntraTileGenSuccessorsLocalInfo_get(swigCPtr);
      CNWTileSurfaceMeshLocalInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWTileSurfaceMeshLocalInfo(cPtr, false);
      return ret;
    } 
  }

  public CNWTileSurfaceMesh() : this(NWNXLibPINVOKE.new_CNWTileSurfaceMesh(), true) {
  }

  public void ClearSubdivision() {
    NWNXLibPINVOKE.CNWTileSurfaceMesh_ClearSubdivision(swigCPtr);
  }

  public int CheckAABBNode(int nDirectionHeuristic, CNWTileSurfaceMeshAABBNode pAABBNode, Vector v0, Vector v1_aor_impact) {
    int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_CheckAABBNode(swigCPtr, nDirectionHeuristic, CNWTileSurfaceMeshAABBNode.getCPtr(pAABBNode), Vector.getCPtr(v0), Vector.getCPtr(v1_aor_impact));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int CheckAABBNodeOneWay(int nDirectionHeuristic, CNWTileSurfaceMeshAABBNode pAABBNode, Vector v0, Vector v1_aor_impact) {
    int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_CheckAABBNodeOneWay(swigCPtr, nDirectionHeuristic, CNWTileSurfaceMeshAABBNode.getCPtr(pAABBNode), Vector.getCPtr(v0), Vector.getCPtr(v1_aor_impact));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int ClippedLineSegmentWalkable(CNWTile pTile, float fStartX, float fStartY, float fEndX, float fEndY, SWIGTYPE_p_float fClipStartX, SWIGTYPE_p_float fClipStartY, SWIGTYPE_p_float fClipEndX, SWIGTYPE_p_float fClipEndY, SWIGTYPE_p_float fClipMinZ, SWIGTYPE_p_float fClipMaxZ) {
    int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_ClippedLineSegmentWalkable(swigCPtr, CNWTile.getCPtr(pTile), fStartX, fStartY, fEndX, fEndY, SWIGTYPE_p_float.getCPtr(fClipStartX), SWIGTYPE_p_float.getCPtr(fClipStartY), SWIGTYPE_p_float.getCPtr(fClipEndX), SWIGTYPE_p_float.getCPtr(fClipEndY), SWIGTYPE_p_float.getCPtr(fClipMinZ), SWIGTYPE_p_float.getCPtr(fClipMaxZ));
    return ret;
  }

  public int ComputeClippedLineSegment(CNWTile pTile, float fStartX, float fStartY, float fEndX, float fEndY, SWIGTYPE_p_float fClipStartX, SWIGTYPE_p_float fClipStartY, SWIGTYPE_p_float fClipEndX, SWIGTYPE_p_float fClipEndY) {
    int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_ComputeClippedLineSegment(swigCPtr, CNWTile.getCPtr(pTile), fStartX, fStartY, fEndX, fEndY, SWIGTYPE_p_float.getCPtr(fClipStartX), SWIGTYPE_p_float.getCPtr(fClipStartY), SWIGTYPE_p_float.getCPtr(fClipEndX), SWIGTYPE_p_float.getCPtr(fClipEndY));
    return ret;
  }

  public float ComputeHeight(Vector vPosition) {
    float ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_ComputeHeight(swigCPtr, Vector.getCPtr(vPosition));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void ComputePathNodes() {
    NWNXLibPINVOKE.CNWTileSurfaceMesh_ComputePathNodes(swigCPtr);
  }

  public void ComputeTriangleAdjacency() {
    NWNXLibPINVOKE.CNWTileSurfaceMesh_ComputeTriangleAdjacency(swigCPtr);
  }

  public float EstimateDistanceToTarget(float fX, float fY) {
    float ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_EstimateDistanceToTarget(swigCPtr, fX, fY);
    return ret;
  }

  public int FindClosestRegion(CNWTile pTile, float fX, float fY, byte nPathNode, int nOrientation) {
    int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_FindClosestRegion__SWIG_0(swigCPtr, CNWTile.getCPtr(pTile), fX, fY, nPathNode, nOrientation);
    return ret;
  }

  public int FindClosestRegion(CNWTile pTile, float fX, float fY, byte nPathNode) {
    int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_FindClosestRegion__SWIG_1(swigCPtr, CNWTile.getCPtr(pTile), fX, fY, nPathNode);
    return ret;
  }

  public int FindClosestRegion(CNWTile pTile, float fX, float fY) {
    int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_FindClosestRegion__SWIG_2(swigCPtr, CNWTile.getCPtr(pTile), fX, fY);
    return ret;
  }

  public int FindRegionViaTriangle(int nTriangle, int nRegionNodes, SWIGTYPE_p_int pnRegionTriangles, SWIGTYPE_p_int pbTriangleChecked) {
    int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_FindRegionViaTriangle(swigCPtr, nTriangle, nRegionNodes, SWIGTYPE_p_int.getCPtr(pnRegionTriangles), SWIGTYPE_p_int.getCPtr(pbTriangleChecked));
    return ret;
  }

  public int FindTriangle(int nLevel, int nDepth, float fX, float fY, int nTriangle) {
    int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_FindTriangle__SWIG_0(swigCPtr, nLevel, nDepth, fX, fY, nTriangle);
    return ret;
  }

  public int FindTriangle(int nLevel, int nDepth, float fX, float fY) {
    int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_FindTriangle__SWIG_1(swigCPtr, nLevel, nDepth, fX, fY);
    return ret;
  }

  public int GenerateBestIntraTileExit(CNWTile pTile, SWIGTYPE_p_CNWArea pWalkGeometry, CPathfindInformation pSearchInformation, float fCurrentX, float fCurrentY) {
    int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_GenerateBestIntraTileExit(swigCPtr, CNWTile.getCPtr(pTile), SWIGTYPE_p_CNWArea.getCPtr(pWalkGeometry), CPathfindInformation.getCPtr(pSearchInformation), fCurrentX, fCurrentY);
    return ret;
  }

  public int GetExit(int nExit, SWIGTYPE_p_float fX, SWIGTYPE_p_float fY, SWIGTYPE_p_int nRegion) {
    int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_GetExit(swigCPtr, nExit, SWIGTYPE_p_float.getCPtr(fX), SWIGTYPE_p_float.getCPtr(fY), SWIGTYPE_p_int.getCPtr(nRegion));
    return ret;
  }

  public int GetExitNumber(float fX, float fY) {
    int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_GetExitNumber(swigCPtr, fX, fY);
    return ret;
  }

  public byte GetPathNode() {
    byte ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_GetPathNode(swigCPtr);
    return ret;
  }

  public int GetPathNodeOrientation() {
    int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_GetPathNodeOrientation(swigCPtr);
    return ret;
  }

  public int GetRegionCoords(int nRegion, SWIGTYPE_p_float fX, SWIGTYPE_p_float fY, byte nPathNode, int nOrientation) {
    int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_GetRegionCoords__SWIG_0(swigCPtr, nRegion, SWIGTYPE_p_float.getCPtr(fX), SWIGTYPE_p_float.getCPtr(fY), nPathNode, nOrientation);
    return ret;
  }

  public int GetRegionCoords(int nRegion, SWIGTYPE_p_float fX, SWIGTYPE_p_float fY, byte nPathNode) {
    int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_GetRegionCoords__SWIG_1(swigCPtr, nRegion, SWIGTYPE_p_float.getCPtr(fX), SWIGTYPE_p_float.getCPtr(fY), nPathNode);
    return ret;
  }

  public int GetRegionCoords(int nRegion, SWIGTYPE_p_float fX, SWIGTYPE_p_float fY) {
    int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_GetRegionCoords__SWIG_2(swigCPtr, nRegion, SWIGTYPE_p_float.getCPtr(fX), SWIGTYPE_p_float.getCPtr(fY));
    return ret;
  }

  public int GetRegionEntrance(float fX, float fY, byte nPathNode, int nOrientation) {
    int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_GetRegionEntrance__SWIG_0(swigCPtr, fX, fY, nPathNode, nOrientation);
    return ret;
  }

  public int GetRegionEntrance(float fX, float fY, byte nPathNode) {
    int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_GetRegionEntrance__SWIG_1(swigCPtr, fX, fY, nPathNode);
    return ret;
  }

  public int GetRegionEntrance(float fX, float fY) {
    int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_GetRegionEntrance__SWIG_2(swigCPtr, fX, fY);
    return ret;
  }

  public int GetSurfaceMaterial(Vector vPosition) {
    int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_GetSurfaceMaterial(swigCPtr, Vector.getCPtr(vPosition));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetTotalExits() {
    int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_GetTotalExits(swigCPtr);
    return ret;
  }

  public void GetTriangleAdjacency(int nLevel, int nTriangle, SWIGTYPE_p_int ta12, SWIGTYPE_p_int ta23, SWIGTYPE_p_int ta31) {
    NWNXLibPINVOKE.CNWTileSurfaceMesh_GetTriangleAdjacency(swigCPtr, nLevel, nTriangle, SWIGTYPE_p_int.getCPtr(ta12), SWIGTYPE_p_int.getCPtr(ta23), SWIGTYPE_p_int.getCPtr(ta31));
  }

  public void GetTriangleCentroid(int nTriangle, SWIGTYPE_p_float fX, SWIGTYPE_p_float fY, SWIGTYPE_p_float fZ) {
    NWNXLibPINVOKE.CNWTileSurfaceMesh_GetTriangleCentroid(swigCPtr, nTriangle, SWIGTYPE_p_float.getCPtr(fX), SWIGTYPE_p_float.getCPtr(fY), SWIGTYPE_p_float.getCPtr(fZ));
  }

  public void GetTriangleVertices(int nLevel, int nTriangle, SWIGTYPE_p_int v1, SWIGTYPE_p_int v2, SWIGTYPE_p_int v3) {
    NWNXLibPINVOKE.CNWTileSurfaceMesh_GetTriangleVertices(swigCPtr, nLevel, nTriangle, SWIGTYPE_p_int.getCPtr(v1), SWIGTYPE_p_int.getCPtr(v2), SWIGTYPE_p_int.getCPtr(v3));
  }

  public void GetVertexGeometry(int nVertex, Vector vVector) {
    NWNXLibPINVOKE.CNWTileSurfaceMesh_GetVertexGeometry__SWIG_0(swigCPtr, nVertex, Vector.getCPtr(vVector));
  }

  public void GetVertexGeometry(int nVertex, SWIGTYPE_p_float vX, SWIGTYPE_p_float vY, SWIGTYPE_p_float vZ) {
    NWNXLibPINVOKE.CNWTileSurfaceMesh_GetVertexGeometry__SWIG_1(swigCPtr, nVertex, SWIGTYPE_p_float.getCPtr(vX), SWIGTYPE_p_float.getCPtr(vY), SWIGTYPE_p_float.getCPtr(vZ));
  }

  public void GetTopLevelVertexGeometry(int nVertex, SWIGTYPE_p_float vX, SWIGTYPE_p_float vY, SWIGTYPE_p_float vZ) {
    NWNXLibPINVOKE.CNWTileSurfaceMesh_GetTopLevelVertexGeometry(swigCPtr, nVertex, SWIGTYPE_p_float.getCPtr(vX), SWIGTYPE_p_float.getCPtr(vY), SWIGTYPE_p_float.getCPtr(vZ));
  }

  public CResRef GetWalkMesh() {
    CResRef ret = new CResRef(NWNXLibPINVOKE.CNWTileSurfaceMesh_GetWalkMesh(swigCPtr), true);
    return ret;
  }

  public int ClearLineOfSight(int nDirectionHeuristic, Vector vSource, Vector vTarget, Vector vImpact) {
    int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_ClearLineOfSight(swigCPtr, nDirectionHeuristic, Vector.getCPtr(vSource), Vector.getCPtr(vTarget), Vector.getCPtr(vImpact));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int ClearLineOfSightOneWay(int nDirectionHeuristic, Vector vSource, Vector vTarget, Vector pImpact) {
    int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_ClearLineOfSightOneWay(swigCPtr, nDirectionHeuristic, Vector.getCPtr(vSource), Vector.getCPtr(vTarget), Vector.getCPtr(pImpact));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int IntersectLineSegments(Vector v1, Vector v2, Vector v3, Vector v4, Vector vIntersect) {
    int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_IntersectLineSegments(swigCPtr, Vector.getCPtr(v1), Vector.getCPtr(v2), Vector.getCPtr(v3), Vector.getCPtr(v4), Vector.getCPtr(vIntersect));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int IntraTileDFS(CNWTile pTile, SWIGTYPE_p_CNWArea pWalkGeometry, CPathfindInformation pSearchInformation, int level, float fDistanceTravelled, int nCurrentTriangle, float fX, float fY, float fStartX, float fStartY, float fPersonalSpace, int bUseAdjacenciesOnly) {
    int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_IntraTileDFS(swigCPtr, CNWTile.getCPtr(pTile), SWIGTYPE_p_CNWArea.getCPtr(pWalkGeometry), CPathfindInformation.getCPtr(pSearchInformation), level, fDistanceTravelled, nCurrentTriangle, fX, fY, fStartX, fStartY, fPersonalSpace, bUseAdjacenciesOnly);
    return ret;
  }

  public int IntraTileDFSGenerateSuccessors(int bAdjacenciesOnly, CNWTile pTile, SWIGTYPE_p_CNWArea pWalkGeometry, float fX, float fY, int nCurrentTriangle, CPathfindInformation pPathfindInfo, SWIGTYPE_p_p_CPathfindInfoIntraTileSuccessors pSuccessors) {
    int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_IntraTileDFSGenerateSuccessors(swigCPtr, bAdjacenciesOnly, CNWTile.getCPtr(pTile), SWIGTYPE_p_CNWArea.getCPtr(pWalkGeometry), fX, fY, nCurrentTriangle, CPathfindInformation.getCPtr(pPathfindInfo), SWIGTYPE_p_p_CPathfindInfoIntraTileSuccessors.getCPtr(pSuccessors));
    return ret;
  }

  public void PrintAABBTreeToPrintLog(CNWTileSurfaceMeshAABBNode pNode, int indentation) {
    NWNXLibPINVOKE.CNWTileSurfaceMesh_PrintAABBTreeToPrintLog(swigCPtr, CNWTileSurfaceMeshAABBNode.getCPtr(pNode), indentation);
  }

  public void LoadDefaultWalkMesh() {
    NWNXLibPINVOKE.CNWTileSurfaceMesh_LoadDefaultWalkMesh(swigCPtr);
  }

  public int LoadWalkMesh() {
    int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_LoadWalkMesh(swigCPtr);
    return ret;
  }

  public int LoadWalkMeshString(SWIGTYPE_p_p_unsigned_char pInput, SWIGTYPE_p_unsigned_int nInputSize, SWIGTYPE_p_unsigned_char pchBuffer, uint nBufferSize) {
    int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_LoadWalkMeshString(swigCPtr, SWIGTYPE_p_p_unsigned_char.getCPtr(pInput), SWIGTYPE_p_unsigned_int.getCPtr(nInputSize), SWIGTYPE_p_unsigned_char.getCPtr(pchBuffer), nBufferSize);
    return ret;
  }

  public int NoNonWalkPolysOnTile(float fSourceX, float fSourceY, float fTargetX, float fTargetY, float fMinZ, float fMaxZ, float fPersonalSpace, int bTestSinglePoint) {
    int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_NoNonWalkPolysOnTile(swigCPtr, fSourceX, fSourceY, fTargetX, fTargetY, fMinZ, fMaxZ, fPersonalSpace, bTestSinglePoint);
    return ret;
  }

  public uint PlotIntraTilePath(CNWTile pTile, SWIGTYPE_p_CNWArea pWalkGeometry, CPathfindInformation pSearchInformation, float fCurrentIntraTileX, float fCurrentIntraTileY, float fInterTileStartX, float fInterTileStartY, uint nMaxTimeAllowed, int bAdjacenciesOnly) {
    uint ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_PlotIntraTilePath(swigCPtr, CNWTile.getCPtr(pTile), SWIGTYPE_p_CNWArea.getCPtr(pWalkGeometry), CPathfindInformation.getCPtr(pSearchInformation), fCurrentIntraTileX, fCurrentIntraTileY, fInterTileStartX, fInterTileStartY, nMaxTimeAllowed, bAdjacenciesOnly);
    return ret;
  }

  public void RunSubdivision(SWIGTYPE_p_int pNewTriangles, int nNewTriangles, SWIGTYPE_p_float pNewVertices, int nNewVertices, SWIGTYPE_p_int pNewTAdjacency, SWIGTYPE_p_int pTriangles, int nTriangles, SWIGTYPE_p_float pVertices, int nVertices, SWIGTYPE_p_int pTAdjacency) {
    NWNXLibPINVOKE.CNWTileSurfaceMesh_RunSubdivision(swigCPtr, SWIGTYPE_p_int.getCPtr(pNewTriangles), nNewTriangles, SWIGTYPE_p_float.getCPtr(pNewVertices), nNewVertices, SWIGTYPE_p_int.getCPtr(pNewTAdjacency), SWIGTYPE_p_int.getCPtr(pTriangles), nTriangles, SWIGTYPE_p_float.getCPtr(pVertices), nVertices, SWIGTYPE_p_int.getCPtr(pTAdjacency));
  }

  public void SetPathNode(byte nPathNode) {
    NWNXLibPINVOKE.CNWTileSurfaceMesh_SetPathNode(swigCPtr, nPathNode);
  }

  public void SetWalkMesh(CResRef cWalkMesh) {
    NWNXLibPINVOKE.CNWTileSurfaceMesh_SetWalkMesh(swigCPtr, CResRef.getCPtr(cWalkMesh));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Subdivide() {
    NWNXLibPINVOKE.CNWTileSurfaceMesh_Subdivide(swigCPtr);
  }

  public int TestLineForWalkableOnArea(float fSourceX, float fSourceY, float fTargetX, float fTargetY, float fClipMinZ, float fClipMaxZ, CPathfindInformation pPathfindInfo, CNWTile pTile, SWIGTYPE_p_CNWArea pArea) {
    int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_TestLineForWalkableOnArea(swigCPtr, fSourceX, fSourceY, fTargetX, fTargetY, fClipMinZ, fClipMaxZ, CPathfindInformation.getCPtr(pPathfindInfo), CNWTile.getCPtr(pTile), SWIGTYPE_p_CNWArea.getCPtr(pArea));
    return ret;
  }

  public int TestLineForWalkableOnTile(float fSourceX, float fSourceY, float fTargetX, float fTargetY, SWIGTYPE_p_float fClipMinZ, SWIGTYPE_p_float fClipMaxZ, CPathfindInformation pPathfindInfo, CNWTile pTile, int bStayOnTile) {
    int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_TestLineForWalkableOnTile__SWIG_0(swigCPtr, fSourceX, fSourceY, fTargetX, fTargetY, SWIGTYPE_p_float.getCPtr(fClipMinZ), SWIGTYPE_p_float.getCPtr(fClipMaxZ), CPathfindInformation.getCPtr(pPathfindInfo), CNWTile.getCPtr(pTile), bStayOnTile);
    return ret;
  }

  public int TestLineForWalkableOnTile(float fSourceX, float fSourceY, float fTargetX, float fTargetY, SWIGTYPE_p_float fClipMinZ, SWIGTYPE_p_float fClipMaxZ, CPathfindInformation pPathfindInfo, CNWTile pTile) {
    int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_TestLineForWalkableOnTile__SWIG_1(swigCPtr, fSourceX, fSourceY, fTargetX, fTargetY, SWIGTYPE_p_float.getCPtr(fClipMinZ), SWIGTYPE_p_float.getCPtr(fClipMaxZ), CPathfindInformation.getCPtr(pPathfindInfo), CNWTile.getCPtr(pTile));
    return ret;
  }

  public int PolyHit(Vector vert, int n, Vector v0, Vector v1, Vector nrml, float dist, Vector impact) {
    int ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_PolyHit(swigCPtr, Vector.getCPtr(vert), n, Vector.getCPtr(v0), Vector.getCPtr(v1), Vector.getCPtr(nrml), dist, Vector.getCPtr(impact));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public byte ConvertToTileOrientation(int nOrientation) {
    byte ret = NWNXLibPINVOKE.CNWTileSurfaceMesh_ConvertToTileOrientation(swigCPtr, nOrientation);
    return ret;
  }

}

}
