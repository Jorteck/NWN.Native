//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NWN.Native.API {

public class CNWPlaceableSurfaceMesh : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CNWPlaceableSurfaceMesh(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CNWPlaceableSurfaceMesh obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CNWPlaceableSurfaceMesh() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NWNXLibPINVOKE.delete_CNWPlaceableSurfaceMesh(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Vector m_pvVertices {
    set {
      NWNXLibPINVOKE.CNWPlaceableSurfaceMesh_m_pvVertices_set(swigCPtr, Vector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWPlaceableSurfaceMesh_m_pvVertices_get(swigCPtr);
      Vector ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int m_pnTriangles {
    set {
      NWNXLibPINVOKE.CNWPlaceableSurfaceMesh_m_pnTriangles_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWPlaceableSurfaceMesh_m_pnTriangles_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public int m_nTriangles {
    set {
      NWNXLibPINVOKE.CNWPlaceableSurfaceMesh_m_nTriangles_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CNWPlaceableSurfaceMesh_m_nTriangles_get(swigCPtr);
      return ret;
    } 
  }

  public int m_nVertices {
    set {
      NWNXLibPINVOKE.CNWPlaceableSurfaceMesh_m_nVertices_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CNWPlaceableSurfaceMesh_m_nVertices_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_int m_pnTriangleMaterial {
    set {
      NWNXLibPINVOKE.CNWPlaceableSurfaceMesh_m_pnTriangleMaterial_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWPlaceableSurfaceMesh_m_pnTriangleMaterial_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public Vector m_pvActionPoints {
    set {
      NWNXLibPINVOKE.CNWPlaceableSurfaceMesh_m_pvActionPoints_set(swigCPtr, Vector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWPlaceableSurfaceMesh_m_pvActionPoints_get(swigCPtr);
      Vector ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector(cPtr, false);
      return ret;
    } 
  }

  public CNWPlaceableSurfaceMesh() : this(NWNXLibPINVOKE.new_CNWPlaceableSurfaceMesh(), true) {
  }

  public int LoadWalkMesh(CResRef cWalkMesh) {
    int ret = NWNXLibPINVOKE.CNWPlaceableSurfaceMesh_LoadWalkMesh(swigCPtr, CResRef.getCPtr(cWalkMesh));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int LoadWalkMeshString(SWIGTYPE_p_p_unsigned_char pInput, SWIGTYPE_p_unsigned_int nInputSize, SWIGTYPE_p_unsigned_char pchBuffer, uint nBufferSize) {
    int ret = NWNXLibPINVOKE.CNWPlaceableSurfaceMesh_LoadWalkMeshString(swigCPtr, SWIGTYPE_p_p_unsigned_char.getCPtr(pInput), SWIGTYPE_p_unsigned_int.getCPtr(nInputSize), SWIGTYPE_p_unsigned_char.getCPtr(pchBuffer), nBufferSize);
    return ret;
  }

}

}
