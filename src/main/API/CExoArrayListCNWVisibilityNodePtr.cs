//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NWN.Native.API {

public unsafe class CExoArrayListCNWVisibilityNodePtr : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CExoArrayListCNWVisibilityNodePtr(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CExoArrayListCNWVisibilityNodePtr obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CExoArrayListCNWVisibilityNodePtr() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NWNXLibPINVOKE.delete_CExoArrayListCNWVisibilityNodePtr(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }
/*@SWIG:/__w/NWN.Native/NWN.Native/nwnx/Plugins/SWIG/SWIG_DotNET/API_NWNXLib.i,26,SWIG_DOTNET_EXTENSIONS@*/
  public global::System.IntPtr Pointer {
    get {
      return swigCPtr.Handle;
    }
  }

  public static unsafe implicit operator void*(CExoArrayListCNWVisibilityNodePtr self) {
    return (void*)self.swigCPtr.Handle;
  }

  public static unsafe CExoArrayListCNWVisibilityNodePtr FromPointer(void* pointer, bool memoryOwn = false) {
    return pointer != null ? new CExoArrayListCNWVisibilityNodePtr((global::System.IntPtr)pointer, memoryOwn) : null;
  }

  public static CExoArrayListCNWVisibilityNodePtr FromPointer(global::System.IntPtr pointer, bool memoryOwn = false) {
    return pointer != global::System.IntPtr.Zero ? new CExoArrayListCNWVisibilityNodePtr(pointer, memoryOwn) : null;
  }

  public bool Equals(CExoArrayListCNWVisibilityNodePtr other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }

    if (ReferenceEquals(this, other)) {
      return true;
    }

    return Pointer.Equals(other.Pointer);
  }

  public override bool Equals(object obj) {
    return ReferenceEquals(this, obj) || obj is CExoArrayListCNWVisibilityNodePtr other && Equals(other);
  }

  public override int GetHashCode() {
    return swigCPtr.Handle.GetHashCode();
  }

  public static bool operator ==(CExoArrayListCNWVisibilityNodePtr left, CExoArrayListCNWVisibilityNodePtr right) {
    return Equals(left, right);
  }

  public static bool operator !=(CExoArrayListCNWVisibilityNodePtr left, CExoArrayListCNWVisibilityNodePtr right) {
    return !Equals(left, right);
  }
/*@SWIG@*/
  public void** element {
    set {
      NWNXLibPINVOKE.CExoArrayListCNWVisibilityNodePtr_element_set(swigCPtr, (global::System.IntPtr)value);
    } 
    get {
        global::System.IntPtr retVal = NWNXLibPINVOKE.CExoArrayListCNWVisibilityNodePtr_element_get(swigCPtr);
        return (void**)retVal;
    }

  }

  public int num {
    set {
      NWNXLibPINVOKE.CExoArrayListCNWVisibilityNodePtr_num_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CExoArrayListCNWVisibilityNodePtr_num_get(swigCPtr);
      return ret;
    } 
  }

  public int array_size {
    set {
      NWNXLibPINVOKE.CExoArrayListCNWVisibilityNodePtr_array_size_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CExoArrayListCNWVisibilityNodePtr_array_size_get(swigCPtr);
      return ret;
    } 
  }

  public CExoArrayListCNWVisibilityNodePtr(int s) : this(NWNXLibPINVOKE.new_CExoArrayListCNWVisibilityNodePtr__SWIG_0(s), true) {
  }

  public CExoArrayListCNWVisibilityNodePtr() : this(NWNXLibPINVOKE.new_CExoArrayListCNWVisibilityNodePtr__SWIG_1(), true) {
  }

  public CExoArrayListCNWVisibilityNodePtr(CExoArrayListCNWVisibilityNodePtr list) : this(NWNXLibPINVOKE.new_CExoArrayListCNWVisibilityNodePtr__SWIG_2(CExoArrayListCNWVisibilityNodePtr.getCPtr(list)), true) {
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public CExoArrayListCNWVisibilityNodePtr _OpAssign(CExoArrayListCNWVisibilityNodePtr list) {
    CExoArrayListCNWVisibilityNodePtr ret = new CExoArrayListCNWVisibilityNodePtr(NWNXLibPINVOKE.CExoArrayListCNWVisibilityNodePtr__OpAssign(swigCPtr, CExoArrayListCNWVisibilityNodePtr.getCPtr(list)), false);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void** _OpIndex(int i) {
    global::System.IntPtr retVal = NWNXLibPINVOKE.CExoArrayListCNWVisibilityNodePtr__OpIndex(swigCPtr, i);
    return (void**)retVal;
  }

  public void Allocate(int s) {
    NWNXLibPINVOKE.CExoArrayListCNWVisibilityNodePtr_Allocate(swigCPtr, s);
  }

  public void SetSize(int s) {
    NWNXLibPINVOKE.CExoArrayListCNWVisibilityNodePtr_SetSize(swigCPtr, s);
  }

  public void Pack() {
    NWNXLibPINVOKE.CExoArrayListCNWVisibilityNodePtr_Pack(swigCPtr);
  }

  public void Add(CNWVisibilityNode t) {
    NWNXLibPINVOKE.CExoArrayListCNWVisibilityNodePtr_Add(swigCPtr, CNWVisibilityNode.getCPtr(t));
  }

  public void Insert(CNWVisibilityNode t, int k) {
    NWNXLibPINVOKE.CExoArrayListCNWVisibilityNodePtr_Insert(swigCPtr, CNWVisibilityNode.getCPtr(t), k);
  }

  public void DelIndex(int i) {
    NWNXLibPINVOKE.CExoArrayListCNWVisibilityNodePtr_DelIndex(swigCPtr, i);
  }

  public void** begin() {
    global::System.IntPtr retVal = NWNXLibPINVOKE.CExoArrayListCNWVisibilityNodePtr_begin(swigCPtr);
    return (void**)retVal;
  }

  public void** end() {
    global::System.IntPtr retVal = NWNXLibPINVOKE.CExoArrayListCNWVisibilityNodePtr_end(swigCPtr);
    return (void**)retVal;
  }

}

}
