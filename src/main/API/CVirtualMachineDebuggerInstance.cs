//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NWN.Native.API {

public class CVirtualMachineDebuggerInstance : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public CVirtualMachineDebuggerInstance(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CVirtualMachineDebuggerInstance obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CVirtualMachineDebuggerInstance() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NWNXLibPINVOKE.delete_CVirtualMachineDebuggerInstance(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public System.IntPtr Pointer {
    get {
      return swigCPtr.Handle;
    }
  }

  public bool Equals(CVirtualMachineDebuggerInstance other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }

    if (ReferenceEquals(this, other)) {
      return true;
    }

    return Pointer.Equals(other.Pointer);
  }

  public override bool Equals(object obj) {
    return ReferenceEquals(this, obj) || obj is CVirtualMachineDebuggerInstance other && Equals(other);
  }

  public override int GetHashCode() {
    return swigCPtr.Handle.GetHashCode();
  }

  public static bool operator ==(CVirtualMachineDebuggerInstance left, CVirtualMachineDebuggerInstance right) {
    return Equals(left, right);
  }

  public static bool operator !=(CVirtualMachineDebuggerInstance left, CVirtualMachineDebuggerInstance right) {
    return !Equals(left, right);
  }

  public CVirtualMachine m_pVMachine {
    set {
      NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pVMachine_set(swigCPtr, CVirtualMachine.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pVMachine_get(swigCPtr);
      CVirtualMachine ret = (cPtr == global::System.IntPtr.Zero) ? null : new CVirtualMachine(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int m_pnInstructionPointer {
    set {
      NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pnInstructionPointer_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pnInstructionPointer_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public string m_pDebugInputMessageBuffer {
    set {
      NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugInputMessageBuffer_set(swigCPtr, value);
    } 
    get {
      string ret = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugInputMessageBuffer_get(swigCPtr);
      return ret;
    } 
  }

  public int m_nDebugInputMessageSize {
    set {
      NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_nDebugInputMessageSize_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_nDebugInputMessageSize_get(swigCPtr);
      return ret;
    } 
  }

  public string m_pDebugOutputMessageBuffer {
    set {
      NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugOutputMessageBuffer_set(swigCPtr, value);
    } 
    get {
      string ret = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugOutputMessageBuffer_get(swigCPtr);
      return ret;
    } 
  }

  public int m_nDebugOutputMessageSize {
    set {
      NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_nDebugOutputMessageSize_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_nDebugOutputMessageSize_get(swigCPtr);
      return ret;
    } 
  }

  public int m_nDebugSourceFileNames {
    set {
      NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_nDebugSourceFileNames_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_nDebugSourceFileNames_get(swigCPtr);
      return ret;
    } 
  }

  public CExoString m_pDebugSourceFileNames {
    set {
      NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugSourceFileNames_set(swigCPtr, CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugSourceFileNames_get(swigCPtr);
      CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
      return ret;
    } 
  }

  public int m_nDebugStructureDefines {
    set {
      NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_nDebugStructureDefines_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_nDebugStructureDefines_get(swigCPtr);
      return ret;
    } 
  }

  public CExoString m_pDebugStructureNames {
    set {
      NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugStructureNames_set(swigCPtr, CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugStructureNames_get(swigCPtr);
      CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int m_pDebugStructureFields {
    set {
      NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugStructureFields_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugStructureFields_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_p_CExoString m_ppDebugStructureFieldNames {
    set {
      NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_ppDebugStructureFieldNames_set(swigCPtr, SWIGTYPE_p_p_CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_ppDebugStructureFieldNames_get(swigCPtr);
      SWIGTYPE_p_p_CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_p_CExoString(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_p_CExoString m_ppDebugStructureTypeNames {
    set {
      NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_ppDebugStructureTypeNames_set(swigCPtr, SWIGTYPE_p_p_CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_ppDebugStructureTypeNames_get(swigCPtr);
      SWIGTYPE_p_p_CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_p_CExoString(cPtr, false);
      return ret;
    } 
  }

  public int m_nDebugFunctionNames {
    set {
      NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_nDebugFunctionNames_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_nDebugFunctionNames_get(swigCPtr);
      return ret;
    } 
  }

  public CExoString m_pDebugFunctionNames {
    set {
      NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugFunctionNames_set(swigCPtr, CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugFunctionNames_get(swigCPtr);
      CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int m_pDebugFunctionBinaryStart {
    set {
      NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugFunctionBinaryStart_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugFunctionBinaryStart_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int m_pDebugFunctionBinaryEnd {
    set {
      NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugFunctionBinaryEnd_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugFunctionBinaryEnd_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int m_pDebugFunctionParameters {
    set {
      NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugFunctionParameters_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugFunctionParameters_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public CExoString m_pDebugFunctionReturnTypeNames {
    set {
      NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugFunctionReturnTypeNames_set(swigCPtr, CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugFunctionReturnTypeNames_get(swigCPtr);
      CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_p_CExoString m_ppDebugFunctionParamTypeNames {
    set {
      NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_ppDebugFunctionParamTypeNames_set(swigCPtr, SWIGTYPE_p_p_CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_ppDebugFunctionParamTypeNames_get(swigCPtr);
      SWIGTYPE_p_p_CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_p_CExoString(cPtr, false);
      return ret;
    } 
  }

  public int m_nDebugVariables {
    set {
      NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_nDebugVariables_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_nDebugVariables_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_int m_pDebugVariableBinaryStart {
    set {
      NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugVariableBinaryStart_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugVariableBinaryStart_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int m_pDebugVariableBinaryEnd {
    set {
      NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugVariableBinaryEnd_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugVariableBinaryEnd_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int m_pDebugVariableStackLocation {
    set {
      NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugVariableStackLocation_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugVariableStackLocation_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public CExoString m_pDebugVariableTypeNames {
    set {
      NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugVariableTypeNames_set(swigCPtr, CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugVariableTypeNames_get(swigCPtr);
      CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
      return ret;
    } 
  }

  public CExoString m_pDebugVariableNames {
    set {
      NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugVariableNames_set(swigCPtr, CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugVariableNames_get(swigCPtr);
      CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
      return ret;
    } 
  }

  public int m_nDebugLineNumbers {
    set {
      NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_nDebugLineNumbers_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_nDebugLineNumbers_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_int m_pDebugLineNumberFileName {
    set {
      NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugLineNumberFileName_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugLineNumberFileName_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int m_pDebugLineNumberCodeLine {
    set {
      NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugLineNumberCodeLine_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugLineNumberCodeLine_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int m_pDebugLineNumberBinaryStart {
    set {
      NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugLineNumberBinaryStart_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugLineNumberBinaryStart_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int m_pDebugLineNumberBinaryEnd {
    set {
      NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugLineNumberBinaryEnd_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugLineNumberBinaryEnd_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public int m_nDebugWatchViewArraySize {
    set {
      NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_nDebugWatchViewArraySize_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_nDebugWatchViewArraySize_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_int m_pDebugWatchViewEmpty {
    set {
      NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugWatchViewEmpty_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugWatchViewEmpty_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int m_pDebugWatchViewTouched {
    set {
      NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugWatchViewTouched_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugWatchViewTouched_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int m_pDebugWatchViewExpanded {
    set {
      NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugWatchViewExpanded_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugWatchViewExpanded_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int m_pDebugWatchViewStackLocations {
    set {
      NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugWatchViewStackLocations_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugWatchViewStackLocations_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public CExoString m_pDebugWatchViewVariableNames {
    set {
      NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugWatchViewVariableNames_set(swigCPtr, CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugWatchViewVariableNames_get(swigCPtr);
      CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
      return ret;
    } 
  }

  public CExoString m_pDebugWatchViewTypeNames {
    set {
      NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugWatchViewTypeNames_set(swigCPtr, CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugWatchViewTypeNames_get(swigCPtr);
      CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
      return ret;
    } 
  }

  public CExoString m_pDebugWatchViewLineNumbers {
    set {
      NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugWatchViewLineNumbers_set(swigCPtr, CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugWatchViewLineNumbers_get(swigCPtr);
      CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
      return ret;
    } 
  }

  public CExoString m_pDebugWatchViewVariableValues {
    set {
      NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugWatchViewVariableValues_set(swigCPtr, CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugWatchViewVariableValues_get(swigCPtr);
      CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
      return ret;
    } 
  }

  public CVirtualMachineDebugLoader m_pDebugLoader {
    set {
      NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugLoader_set(swigCPtr, CVirtualMachineDebugLoader.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pDebugLoader_get(swigCPtr);
      CVirtualMachineDebugLoader ret = (cPtr == global::System.IntPtr.Zero) ? null : new CVirtualMachineDebugLoader(cPtr, false);
      return ret;
    } 
  }

  public CExoString m_sCurrentSourceFileName {
    set {
      NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_sCurrentSourceFileName_set(swigCPtr, CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_sCurrentSourceFileName_get(swigCPtr);
      CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
      return ret;
    } 
  }

  public CScriptSourceFile m_pCurrentSourceScriptFile {
    set {
      NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pCurrentSourceScriptFile_set(swigCPtr, CScriptSourceFile.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_pCurrentSourceScriptFile_get(swigCPtr);
      CScriptSourceFile ret = (cPtr == global::System.IntPtr.Zero) ? null : new CScriptSourceFile(cPtr, false);
      return ret;
    } 
  }

  public int m_nActiveCallStackEntry {
    set {
      NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_nActiveCallStackEntry_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_m_nActiveCallStackEntry_get(swigCPtr);
      return ret;
    } 
  }

  public CVirtualMachineDebuggerInstance() : this(NWNXLibPINVOKE.new_CVirtualMachineDebuggerInstance(), true) {
  }

  public int SpawnDebugger() {
    int ret = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_SpawnDebugger(swigCPtr);
    return ret;
  }

  public int DebuggerMainLoop() {
    int ret = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_DebuggerMainLoop(swigCPtr);
    return ret;
  }

  public void ShutDownDebugger() {
    NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_ShutDownDebugger(swigCPtr);
  }

  public int GenerateLineNumberFromInstructionPointer(int nIP, int bExactCheck) {
    int ret = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_GenerateLineNumberFromInstructionPointer__SWIG_0(swigCPtr, nIP, bExactCheck);
    return ret;
  }

  public int GenerateLineNumberFromInstructionPointer(int nIP) {
    int ret = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_GenerateLineNumberFromInstructionPointer__SWIG_1(swigCPtr, nIP);
    return ret;
  }

  public int ReadIntegerFromInput(SWIGTYPE_p_int pnSize, SWIGTYPE_p_int pnInteger) {
    int ret = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_ReadIntegerFromInput(swigCPtr, SWIGTYPE_p_int.getCPtr(pnSize), SWIGTYPE_p_int.getCPtr(pnInteger));
    return ret;
  }

  public int ReadStringFromInput(SWIGTYPE_p_int pnSize, CExoString psString) {
    int ret = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_ReadStringFromInput(swigCPtr, SWIGTYPE_p_int.getCPtr(pnSize), CExoString.getCPtr(psString));
    return ret;
  }

  public int ParseAndExecuteMessage(SWIGTYPE_p_int nSize) {
    int ret = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_ParseAndExecuteMessage(swigCPtr, SWIGTYPE_p_int.getCPtr(nSize));
    return ret;
  }

  public string LoadDebugInfoLine(SWIGTYPE_p_unsigned_char pResourceData, uint nResourceSize, uint nOffsetStart, SWIGTYPE_p_unsigned_int pnOffsetEnd) {
    string ret = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_LoadDebugInfoLine(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(pResourceData), nResourceSize, nOffsetStart, SWIGTYPE_p_unsigned_int.getCPtr(pnOffsetEnd));
    return ret;
  }

  public int LoadDebugInfo(CVirtualMachineDebugLoader pDebugLoader) {
    int ret = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_LoadDebugInfo(swigCPtr, CVirtualMachineDebugLoader.getCPtr(pDebugLoader));
    return ret;
  }

  public string LoadScriptLine(SWIGTYPE_p_unsigned_char pResourceData, uint nResourceSize, uint nOffsetStart, SWIGTYPE_p_unsigned_int pnOffsetEnd, int bIncludeReturns) {
    string ret = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_LoadScriptLine(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(pResourceData), nResourceSize, nOffsetStart, SWIGTYPE_p_unsigned_int.getCPtr(pnOffsetEnd), bIncludeReturns);
    return ret;
  }

  public int GenerateFunctionIDFromInstructionPointer(int nIP) {
    int ret = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_GenerateFunctionIDFromInstructionPointer(swigCPtr, nIP);
    return ret;
  }

  public int GenerateTypeSize(CExoString pNDBString) {
    int ret = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_GenerateTypeSize(swigCPtr, CExoString.getCPtr(pNDBString));
    return ret;
  }

  public int GenerateStackSizeAtInstructionPointer(int nFunctionID, int nIP) {
    int ret = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_GenerateStackSizeAtInstructionPointer(swigCPtr, nFunctionID, nIP);
    return ret;
  }

  public int GenerateDebugVariableLocationForParameter(int nFunctionID, int nParameter) {
    int ret = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_GenerateDebugVariableLocationForParameter(swigCPtr, nFunctionID, nParameter);
    return ret;
  }

  public int GetNextDebugVariable(int nFunctionID, int nIP, int nStackLocationToExceed) {
    int ret = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_GetNextDebugVariable(swigCPtr, nFunctionID, nIP, nStackLocationToExceed);
    return ret;
  }

  public CExoString GenerateTypeName(CExoString pNDBString) {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_GenerateTypeName(swigCPtr, CExoString.getCPtr(pNDBString)), true);
    return ret;
  }

  public CExoString GenerateTypeValueFromStackLocation(int nStackLocation, CExoString pTypeString) {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_GenerateTypeValueFromStackLocation(swigCPtr, nStackLocation, CExoString.getCPtr(pTypeString)), true);
    return ret;
  }

  public CExoString GenerateCallStackParameterView(int nStackLocation, CExoString sVariableName, CExoString sTypeName) {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_GenerateCallStackParameterView(swigCPtr, nStackLocation, CExoString.getCPtr(sVariableName), CExoString.getCPtr(sTypeName)), true);
    return ret;
  }

  public CExoString GenerateCallStackView(int nFunctionID, int nInstructionPointer, int nStackPointer) {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_GenerateCallStackView(swigCPtr, nFunctionID, nInstructionPointer, nStackPointer), true);
    return ret;
  }

  public void ToggleWatchWindowExpansion(CExoString sLineNumber) {
    NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_ToggleWatchWindowExpansion(swigCPtr, CExoString.getCPtr(sLineNumber));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public int DebuggerSingleStep(int bStepOver) {
    int ret = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_DebuggerSingleStep__SWIG_0(swigCPtr, bStepOver);
    return ret;
  }

  public int DebuggerSingleStep() {
    int ret = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_DebuggerSingleStep__SWIG_1(swigCPtr);
    return ret;
  }

  public int FindEmptyWatchViewEntry() {
    int ret = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_FindEmptyWatchViewEntry(swigCPtr);
    return ret;
  }

  public int FindWatchViewEntry(CExoString psVariableName, CExoString psTypeName, int nStackLocation) {
    int ret = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_FindWatchViewEntry(swigCPtr, CExoString.getCPtr(psVariableName), CExoString.getCPtr(psTypeName), nStackLocation);
    return ret;
  }

  public void SendWatchWindowEntry(CExoString psLineNumber, CExoString psVariableName, CExoString psVariableValue, CExoString psTypeName, int nStackLocation) {
    NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_SendWatchWindowEntry(swigCPtr, CExoString.getCPtr(psLineNumber), CExoString.getCPtr(psVariableName), CExoString.getCPtr(psVariableValue), CExoString.getCPtr(psTypeName), nStackLocation);
  }

  public void SendWatchWindowUpdateCommands(int nActiveCallStackEntry) {
    NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_SendWatchWindowUpdateCommands(swigCPtr, nActiveCallStackEntry);
  }

  public void SendCallStackWindowUpdateCommands() {
    NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_SendCallStackWindowUpdateCommands(swigCPtr);
  }

  public void SendCodeWindowUpdateCommands(CExoString sDebugFileName, int nCodeLine) {
    NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_SendCodeWindowUpdateCommands(swigCPtr, CExoString.getCPtr(sDebugFileName), nCodeLine);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SendLabelsAndKeywords() {
    NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_SendLabelsAndKeywords(swigCPtr);
  }

  public int DebuggerDisplayCurrentLocation(int nActiveCallStackEntry, int bInternalDebug) {
    int ret = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_DebuggerDisplayCurrentLocation__SWIG_0(swigCPtr, nActiveCallStackEntry, bInternalDebug);
    return ret;
  }

  public int DebuggerDisplayCurrentLocation(int nActiveCallStackEntry) {
    int ret = NWNXLibPINVOKE.CVirtualMachineDebuggerInstance_DebuggerDisplayCurrentLocation__SWIG_1(swigCPtr, nActiveCallStackEntry);
    return ret;
  }

}

}
