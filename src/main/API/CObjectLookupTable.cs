//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NWN.Native.API {

public class CObjectLookupTable : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CObjectLookupTable(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CObjectLookupTable obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CObjectLookupTable() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NWNXLibPINVOKE.delete_CObjectLookupTable(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SWIGTYPE_p_unsigned_int m_pdwObjectTable {
    set {
      NWNXLibPINVOKE.CObjectLookupTable_m_pdwObjectTable_set(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CObjectLookupTable_m_pdwObjectTable_get(swigCPtr);
      SWIGTYPE_p_unsigned_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
      return ret;
    } 
  }

  public uint m_dwStart {
    set {
      NWNXLibPINVOKE.CObjectLookupTable_m_dwStart_set(swigCPtr, value);
    } 
    get {
      uint ret = NWNXLibPINVOKE.CObjectLookupTable_m_dwStart_get(swigCPtr);
      return ret;
    } 
  }

  public uint m_dwEnd {
    set {
      NWNXLibPINVOKE.CObjectLookupTable_m_dwEnd_set(swigCPtr, value);
    } 
    get {
      uint ret = NWNXLibPINVOKE.CObjectLookupTable_m_dwEnd_get(swigCPtr);
      return ret;
    } 
  }

  public int m_bUpdateRequired {
    set {
      NWNXLibPINVOKE.CObjectLookupTable_m_bUpdateRequired_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CObjectLookupTable_m_bUpdateRequired_get(swigCPtr);
      return ret;
    } 
  }

  public CObjectLookupTable() : this(NWNXLibPINVOKE.new_CObjectLookupTable(), true) {
  }

  public uint AddID(uint dwID) {
    uint ret = NWNXLibPINVOKE.CObjectLookupTable_AddID(swigCPtr, dwID);
    return ret;
  }

  public uint GetIDFromIndex(uint dwSlot) {
    uint ret = NWNXLibPINVOKE.CObjectLookupTable_GetIDFromIndex(swigCPtr, dwSlot);
    return ret;
  }

  public void GetUpdate(SWIGTYPE_p_unsigned_char pData, SWIGTYPE_p_unsigned_int dwSize) {
    NWNXLibPINVOKE.CObjectLookupTable_GetUpdate(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(pData), SWIGTYPE_p_unsigned_int.getCPtr(dwSize));
  }

  public void Update(SWIGTYPE_p_unsigned_char pData, uint dwSize) {
    NWNXLibPINVOKE.CObjectLookupTable_Update(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(pData), dwSize);
  }

  public uint GetIndexFromID(uint dwID) {
    uint ret = NWNXLibPINVOKE.CObjectLookupTable_GetIndexFromID(swigCPtr, dwID);
    return ret;
  }

  public void Touch(uint dwSlot) {
    NWNXLibPINVOKE.CObjectLookupTable_Touch(swigCPtr, dwSlot);
  }

}

}
