//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NWN.Native.API {

public unsafe class CObjectLookupTable : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CObjectLookupTable(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CObjectLookupTable obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CObjectLookupTable() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NWNXLibPINVOKE.delete_CObjectLookupTable(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }
/*@SWIG:/__w/NWN.Native/NWN.Native/nwnx/Plugins/SWIG/SWIG_DotNET/API_NWNXLib.i,25,SWIG_DOTNET_EXTENSIONS@*/
  public global::System.IntPtr Pointer {
    get {
      return swigCPtr.Handle;
    }
  }

  public static unsafe implicit operator void*(CObjectLookupTable self) {
    return (void*)self.swigCPtr.Handle;
  }

  public static unsafe CObjectLookupTable FromPointer(void* pointer, bool memoryOwn = false) {
    return pointer != null ? new CObjectLookupTable((global::System.IntPtr)pointer, memoryOwn) : null;
  }

  public static CObjectLookupTable FromPointer(global::System.IntPtr pointer, bool memoryOwn = false) {
    return pointer != global::System.IntPtr.Zero ? new CObjectLookupTable(pointer, memoryOwn) : null;
  }

  public bool Equals(CObjectLookupTable other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }

    if (ReferenceEquals(this, other)) {
      return true;
    }

    return Pointer.Equals(other.Pointer);
  }

  public override bool Equals(object obj) {
    return ReferenceEquals(this, obj) || obj is CObjectLookupTable other && Equals(other);
  }

  public override int GetHashCode() {
    return swigCPtr.Handle.GetHashCode();
  }

  public static bool operator ==(CObjectLookupTable left, CObjectLookupTable right) {
    return Equals(left, right);
  }

  public static bool operator !=(CObjectLookupTable left, CObjectLookupTable right) {
    return !Equals(left, right);
  }
/*@SWIG@*/
  public uint* m_pdwObjectTable {
    set {
      NWNXLibPINVOKE.CObjectLookupTable_m_pdwObjectTable_set(swigCPtr, value);
    } 
    get {
      uint* retVal = NWNXLibPINVOKE.CObjectLookupTable_m_pdwObjectTable_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_dwStart {
    set {
      NWNXLibPINVOKE.CObjectLookupTable_m_dwStart_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CObjectLookupTable_m_dwStart_get(swigCPtr);
      return retVal;
    }

  }

  public uint m_dwEnd {
    set {
      NWNXLibPINVOKE.CObjectLookupTable_m_dwEnd_set(swigCPtr, value);
    } 
    get {
      uint retVal = NWNXLibPINVOKE.CObjectLookupTable_m_dwEnd_get(swigCPtr);
      return retVal;
    }

  }

  public int m_bUpdateRequired {
    set {
      NWNXLibPINVOKE.CObjectLookupTable_m_bUpdateRequired_set(swigCPtr, value);
    } 
    get {
      int retVal = NWNXLibPINVOKE.CObjectLookupTable_m_bUpdateRequired_get(swigCPtr);
      return retVal;
    }

  }

  public CObjectLookupTable() : this(NWNXLibPINVOKE.new_CObjectLookupTable(), true) {
  }

  public uint AddID(uint dwID) {
    uint retVal = NWNXLibPINVOKE.CObjectLookupTable_AddID(swigCPtr, dwID);
    return retVal;
  }

  public uint GetIDFromIndex(uint dwSlot) {
    uint retVal = NWNXLibPINVOKE.CObjectLookupTable_GetIDFromIndex(swigCPtr, dwSlot);
    return retVal;
  }

  public void GetUpdate(byte* pData, uint* dwSize) {
    NWNXLibPINVOKE.CObjectLookupTable_GetUpdate(swigCPtr, pData, dwSize);
  }

  public void Update(byte* pData, uint dwSize) {
    NWNXLibPINVOKE.CObjectLookupTable_Update(swigCPtr, pData, dwSize);
  }

  public uint GetIndexFromID(uint dwID) {
    uint retVal = NWNXLibPINVOKE.CObjectLookupTable_GetIndexFromID(swigCPtr, dwID);
    return retVal;
  }

  public void Touch(uint dwSlot) {
    NWNXLibPINVOKE.CObjectLookupTable_Touch(swigCPtr, dwSlot);
  }

}

}
