//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NWN.Native.API {

public class CResGFFFileHeader : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CResGFFFileHeader(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CResGFFFileHeader obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CResGFFFileHeader() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public uint m_nFileType {
    set {
      NWNXLibPINVOKE.CResGFFFileHeader_m_nFileType_set(swigCPtr, value);
    } 
    get {
      uint ret = NWNXLibPINVOKE.CResGFFFileHeader_m_nFileType_get(swigCPtr);
      return ret;
    } 
  }

  public uint m_nFileVersion {
    set {
      NWNXLibPINVOKE.CResGFFFileHeader_m_nFileVersion_set(swigCPtr, value);
    } 
    get {
      uint ret = NWNXLibPINVOKE.CResGFFFileHeader_m_nFileVersion_get(swigCPtr);
      return ret;
    } 
  }

  public uint m_nStructOffset {
    set {
      NWNXLibPINVOKE.CResGFFFileHeader_m_nStructOffset_set(swigCPtr, value);
    } 
    get {
      uint ret = NWNXLibPINVOKE.CResGFFFileHeader_m_nStructOffset_get(swigCPtr);
      return ret;
    } 
  }

  public uint m_nStructCount {
    set {
      NWNXLibPINVOKE.CResGFFFileHeader_m_nStructCount_set(swigCPtr, value);
    } 
    get {
      uint ret = NWNXLibPINVOKE.CResGFFFileHeader_m_nStructCount_get(swigCPtr);
      return ret;
    } 
  }

  public uint m_nFieldOffset {
    set {
      NWNXLibPINVOKE.CResGFFFileHeader_m_nFieldOffset_set(swigCPtr, value);
    } 
    get {
      uint ret = NWNXLibPINVOKE.CResGFFFileHeader_m_nFieldOffset_get(swigCPtr);
      return ret;
    } 
  }

  public uint m_nFieldCount {
    set {
      NWNXLibPINVOKE.CResGFFFileHeader_m_nFieldCount_set(swigCPtr, value);
    } 
    get {
      uint ret = NWNXLibPINVOKE.CResGFFFileHeader_m_nFieldCount_get(swigCPtr);
      return ret;
    } 
  }

  public uint m_nLabelOffset {
    set {
      NWNXLibPINVOKE.CResGFFFileHeader_m_nLabelOffset_set(swigCPtr, value);
    } 
    get {
      uint ret = NWNXLibPINVOKE.CResGFFFileHeader_m_nLabelOffset_get(swigCPtr);
      return ret;
    } 
  }

  public uint m_nLabelCount {
    set {
      NWNXLibPINVOKE.CResGFFFileHeader_m_nLabelCount_set(swigCPtr, value);
    } 
    get {
      uint ret = NWNXLibPINVOKE.CResGFFFileHeader_m_nLabelCount_get(swigCPtr);
      return ret;
    } 
  }

  public uint m_nDataFieldOffset {
    set {
      NWNXLibPINVOKE.CResGFFFileHeader_m_nDataFieldOffset_set(swigCPtr, value);
    } 
    get {
      uint ret = NWNXLibPINVOKE.CResGFFFileHeader_m_nDataFieldOffset_get(swigCPtr);
      return ret;
    } 
  }

  public uint m_nDataFieldCount {
    set {
      NWNXLibPINVOKE.CResGFFFileHeader_m_nDataFieldCount_set(swigCPtr, value);
    } 
    get {
      uint ret = NWNXLibPINVOKE.CResGFFFileHeader_m_nDataFieldCount_get(swigCPtr);
      return ret;
    } 
  }

  public uint m_nDataLayoutFieldOffset {
    set {
      NWNXLibPINVOKE.CResGFFFileHeader_m_nDataLayoutFieldOffset_set(swigCPtr, value);
    } 
    get {
      uint ret = NWNXLibPINVOKE.CResGFFFileHeader_m_nDataLayoutFieldOffset_get(swigCPtr);
      return ret;
    } 
  }

  public uint m_nDataLayoutFieldCount {
    set {
      NWNXLibPINVOKE.CResGFFFileHeader_m_nDataLayoutFieldCount_set(swigCPtr, value);
    } 
    get {
      uint ret = NWNXLibPINVOKE.CResGFFFileHeader_m_nDataLayoutFieldCount_get(swigCPtr);
      return ret;
    } 
  }

  public uint m_nDataLayoutListOffset {
    set {
      NWNXLibPINVOKE.CResGFFFileHeader_m_nDataLayoutListOffset_set(swigCPtr, value);
    } 
    get {
      uint ret = NWNXLibPINVOKE.CResGFFFileHeader_m_nDataLayoutListOffset_get(swigCPtr);
      return ret;
    } 
  }

  public uint m_nDataLayoutListCount {
    set {
      NWNXLibPINVOKE.CResGFFFileHeader_m_nDataLayoutListCount_set(swigCPtr, value);
    } 
    get {
      uint ret = NWNXLibPINVOKE.CResGFFFileHeader_m_nDataLayoutListCount_get(swigCPtr);
      return ret;
    } 
  }

}

}
