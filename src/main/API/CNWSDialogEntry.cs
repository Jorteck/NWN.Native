//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NWN.Native.API {

public class CNWSDialogEntry : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CNWSDialogEntry(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CNWSDialogEntry obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CNWSDialogEntry() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public CExoString m_sSpeaker {
    set {
      NWNXLibPINVOKE.CNWSDialogEntry_m_sSpeaker_set(swigCPtr, CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSDialogEntry_m_sSpeaker_get(swigCPtr);
      CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
      return ret;
    } 
  }

  public uint m_nAnimation {
    set {
      NWNXLibPINVOKE.CNWSDialogEntry_m_nAnimation_set(swigCPtr, value);
    } 
    get {
      uint ret = NWNXLibPINVOKE.CNWSDialogEntry_m_nAnimation_get(swigCPtr);
      return ret;
    } 
  }

  public byte m_bAnimationLoop {
    set {
      NWNXLibPINVOKE.CNWSDialogEntry_m_bAnimationLoop_set(swigCPtr, value);
    } 
    get {
      byte ret = NWNXLibPINVOKE.CNWSDialogEntry_m_bAnimationLoop_get(swigCPtr);
      return ret;
    } 
  }

  public CExoLocString m_sText {
    set {
      NWNXLibPINVOKE.CNWSDialogEntry_m_sText_set(swigCPtr, CExoLocString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSDialogEntry_m_sText_get(swigCPtr);
      CExoLocString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoLocString(cPtr, false);
      return ret;
    } 
  }

  public CNWSDialogLinkReply m_pReplies {
    set {
      NWNXLibPINVOKE.CNWSDialogEntry_m_pReplies_set(swigCPtr, CNWSDialogLinkReply.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSDialogEntry_m_pReplies_get(swigCPtr);
      CNWSDialogLinkReply ret = (cPtr == global::System.IntPtr.Zero) ? null : new CNWSDialogLinkReply(cPtr, false);
      return ret;
    } 
  }

  public uint m_nReplies {
    set {
      NWNXLibPINVOKE.CNWSDialogEntry_m_nReplies_set(swigCPtr, value);
    } 
    get {
      uint ret = NWNXLibPINVOKE.CNWSDialogEntry_m_nReplies_get(swigCPtr);
      return ret;
    } 
  }

  public CResRef m_sScript {
    set {
      NWNXLibPINVOKE.CNWSDialogEntry_m_sScript_set(swigCPtr, CResRef.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSDialogEntry_m_sScript_get(swigCPtr);
      CResRef ret = (cPtr == global::System.IntPtr.Zero) ? null : new CResRef(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_CExoArrayListT_ScriptParam_t m_lActionParams {
    set {
      NWNXLibPINVOKE.CNWSDialogEntry_m_lActionParams_set(swigCPtr, SWIGTYPE_p_CExoArrayListT_ScriptParam_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSDialogEntry_m_lActionParams_get(swigCPtr);
      SWIGTYPE_p_CExoArrayListT_ScriptParam_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_CExoArrayListT_ScriptParam_t(cPtr, false);
      return ret;
    } 
  }

  public uint m_nDelay {
    set {
      NWNXLibPINVOKE.CNWSDialogEntry_m_nDelay_set(swigCPtr, value);
    } 
    get {
      uint ret = NWNXLibPINVOKE.CNWSDialogEntry_m_nDelay_get(swigCPtr);
      return ret;
    } 
  }

  public CResRef m_sSound {
    set {
      NWNXLibPINVOKE.CNWSDialogEntry_m_sSound_set(swigCPtr, CResRef.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSDialogEntry_m_sSound_get(swigCPtr);
      CResRef ret = (cPtr == global::System.IntPtr.Zero) ? null : new CResRef(cPtr, false);
      return ret;
    } 
  }

  public CExoString m_sQuestTag {
    set {
      NWNXLibPINVOKE.CNWSDialogEntry_m_sQuestTag_set(swigCPtr, CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSDialogEntry_m_sQuestTag_get(swigCPtr);
      CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
      return ret;
    } 
  }

  public uint m_nQuestId {
    set {
      NWNXLibPINVOKE.CNWSDialogEntry_m_nQuestId_set(swigCPtr, value);
    } 
    get {
      uint ret = NWNXLibPINVOKE.CNWSDialogEntry_m_nQuestId_get(swigCPtr);
      return ret;
    } 
  }

}

}
