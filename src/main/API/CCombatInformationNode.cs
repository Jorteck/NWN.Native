//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NWN.Native.API {

public class CCombatInformationNode : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CCombatInformationNode(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CCombatInformationNode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CCombatInformationNode() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public char m_nModifier {
    set {
      NWNXLibPINVOKE.CCombatInformationNode_m_nModifier_set(swigCPtr, value);
    } 
    get {
      char ret = NWNXLibPINVOKE.CCombatInformationNode_m_nModifier_get(swigCPtr);
      return ret;
    } 
  }

  public byte m_nModifierType {
    set {
      NWNXLibPINVOKE.CCombatInformationNode_m_nModifierType_set(swigCPtr, value);
    } 
    get {
      byte ret = NWNXLibPINVOKE.CCombatInformationNode_m_nModifierType_get(swigCPtr);
      return ret;
    } 
  }

  public byte m_nWeaponWield {
    set {
      NWNXLibPINVOKE.CCombatInformationNode_m_nWeaponWield_set(swigCPtr, value);
    } 
    get {
      byte ret = NWNXLibPINVOKE.CCombatInformationNode_m_nWeaponWield_get(swigCPtr);
      return ret;
    } 
  }

  public byte m_nVersusAlignLawChaos {
    set {
      NWNXLibPINVOKE.CCombatInformationNode_m_nVersusAlignLawChaos_set(swigCPtr, value);
    } 
    get {
      byte ret = NWNXLibPINVOKE.CCombatInformationNode_m_nVersusAlignLawChaos_get(swigCPtr);
      return ret;
    } 
  }

  public byte m_nVersusAlignGoodEvil {
    set {
      NWNXLibPINVOKE.CCombatInformationNode_m_nVersusAlignGoodEvil_set(swigCPtr, value);
    } 
    get {
      byte ret = NWNXLibPINVOKE.CCombatInformationNode_m_nVersusAlignGoodEvil_get(swigCPtr);
      return ret;
    } 
  }

  public byte m_nVersusRace {
    set {
      NWNXLibPINVOKE.CCombatInformationNode_m_nVersusRace_set(swigCPtr, value);
    } 
    get {
      byte ret = NWNXLibPINVOKE.CCombatInformationNode_m_nVersusRace_get(swigCPtr);
      return ret;
    } 
  }

  public CCombatInformationNode() : this(NWNXLibPINVOKE.new_CCombatInformationNode(), true) {
  }

  public int __Equals(CCombatInformationNode pNode) {
    int ret = NWNXLibPINVOKE.CCombatInformationNode___Equals(swigCPtr, CCombatInformationNode.getCPtr(pNode));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int __NotEquals(CCombatInformationNode pNode) {
    int ret = NWNXLibPINVOKE.CCombatInformationNode___NotEquals(swigCPtr, CCombatInformationNode.getCPtr(pNode));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CCombatInformationNode __Assign(CCombatInformationNode pNode) {
    CCombatInformationNode ret = new CCombatInformationNode(NWNXLibPINVOKE.CCombatInformationNode___Assign(swigCPtr, CCombatInformationNode.getCPtr(pNode)), false);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
