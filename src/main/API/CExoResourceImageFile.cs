//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NWN.Native.API {

public class CExoResourceImageFile : CExoPackedFile {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CExoResourceImageFile(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NWNXLibPINVOKE.CExoResourceImageFile_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CExoResourceImageFile obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NWNXLibPINVOKE.delete_CExoResourceImageFile(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public SWIGTYPE_p_unsigned_char m_pResourceImage {
    set {
      NWNXLibPINVOKE.CExoResourceImageFile_m_pResourceImage_set(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CExoResourceImageFile_m_pResourceImage_get(swigCPtr);
      SWIGTYPE_p_unsigned_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
      return ret;
    } 
  }

  public CExoResourceImageFile() : this(NWNXLibPINVOKE.new_CExoResourceImageFile(), true) {
  }

  public override void AddRefCount() {
    NWNXLibPINVOKE.CExoResourceImageFile_AddRefCount(swigCPtr);
  }

  public override void AddAsyncRefCount() {
    NWNXLibPINVOKE.CExoResourceImageFile_AddAsyncRefCount(swigCPtr);
  }

  public override int CloseFile() {
    int ret = NWNXLibPINVOKE.CExoResourceImageFile_CloseFile(swigCPtr);
    return ret;
  }

  public override int CloseAsyncFile() {
    int ret = NWNXLibPINVOKE.CExoResourceImageFile_CloseAsyncFile(swigCPtr);
    return ret;
  }

  public override void DeleteRefCount() {
    NWNXLibPINVOKE.CExoResourceImageFile_DeleteRefCount(swigCPtr);
  }

  public override void DeleteAsyncRefCount() {
    NWNXLibPINVOKE.CExoResourceImageFile_DeleteAsyncRefCount(swigCPtr);
  }

  public override uint GetResourceSize(RESID nID) {
    uint ret = NWNXLibPINVOKE.CExoResourceImageFile_GetResourceSize(swigCPtr, RESID.getCPtr(nID));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int Initialize() {
    int ret = NWNXLibPINVOKE.CExoResourceImageFile_Initialize(swigCPtr);
    return ret;
  }

  public override int OpenFile() {
    int ret = NWNXLibPINVOKE.CExoResourceImageFile_OpenFile__SWIG_0(swigCPtr);
    return ret;
  }

  public override int OpenFile(SWIGTYPE_p_unsigned_char pCipher) {
    int ret = NWNXLibPINVOKE.CExoResourceImageFile_OpenFile__SWIG_1(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(pCipher));
    return ret;
  }

  public override int OpenAsyncFile() {
    int ret = NWNXLibPINVOKE.CExoResourceImageFile_OpenAsyncFile(swigCPtr);
    return ret;
  }

  public override uint ReadResource(RESID nID, SWIGTYPE_p_void pData, uint nSize, uint nDataOffset) {
    uint ret = NWNXLibPINVOKE.CExoResourceImageFile_ReadResource(swigCPtr, RESID.getCPtr(nID), SWIGTYPE_p_void.getCPtr(pData), nSize, nDataOffset);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void ReadResourceAsync(RESID nID, SWIGTYPE_p_void pData, uint nSize, uint nDataOffset) {
    NWNXLibPINVOKE.CExoResourceImageFile_ReadResourceAsync(swigCPtr, RESID.getCPtr(nID), SWIGTYPE_p_void.getCPtr(pData), nSize, nDataOffset);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public override int LoadHeader(byte nType) {
    int ret = NWNXLibPINVOKE.CExoResourceImageFile_LoadHeader__SWIG_0(swigCPtr, nType);
    return ret;
  }

  public override int LoadHeader() {
    int ret = NWNXLibPINVOKE.CExoResourceImageFile_LoadHeader__SWIG_1(swigCPtr);
    return ret;
  }

  public override int UnloadHeader() {
    int ret = NWNXLibPINVOKE.CExoResourceImageFile_UnloadHeader(swigCPtr);
    return ret;
  }

  public virtual SWIGTYPE_p_void GetResource(RESID nID) {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CExoResourceImageFile_GetResource(swigCPtr, RESID.getCPtr(nID));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_p_ENCAPSULATED_KEYLISTENTRY GetKeyList() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CExoResourceImageFile_GetKeyList(swigCPtr);
    SWIGTYPE_p_p_ENCAPSULATED_KEYLISTENTRY ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_p_ENCAPSULATED_KEYLISTENTRY(cPtr, false);
    return ret;
  }

  public ENCAPSULATED_KEYLISTENTRY GetKeyListEntry(uint nIndex) {
    ENCAPSULATED_KEYLISTENTRY ret = new ENCAPSULATED_KEYLISTENTRY(NWNXLibPINVOKE.CExoResourceImageFile_GetKeyListEntry(swigCPtr, nIndex), true);
    return ret;
  }

  public ENCAPSULATED_RESLISTENTRY GetResourceListEntry(RESID nID) {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CExoResourceImageFile_GetResourceListEntry(swigCPtr, RESID.getCPtr(nID));
    ENCAPSULATED_RESLISTENTRY ret = (cPtr == global::System.IntPtr.Zero) ? null : new ENCAPSULATED_RESLISTENTRY(cPtr, false);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ENCAPSULATED_HEADER GetHeader() {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CExoResourceImageFile_GetHeader(swigCPtr);
    ENCAPSULATED_HEADER ret = (cPtr == global::System.IntPtr.Zero) ? null : new ENCAPSULATED_HEADER(cPtr, false);
    return ret;
  }

}

}
