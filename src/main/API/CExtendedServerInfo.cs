//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NWN.Native.API {

public class CExtendedServerInfo : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CExtendedServerInfo(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CExtendedServerInfo obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CExtendedServerInfo() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public int m_bPasswordRequired {
    set {
      NWNXLibPINVOKE.CExtendedServerInfo_m_bPasswordRequired_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CExtendedServerInfo_m_bPasswordRequired_get(swigCPtr);
      return ret;
    } 
  }

  public byte m_nMinLevel {
    set {
      NWNXLibPINVOKE.CExtendedServerInfo_m_nMinLevel_set(swigCPtr, value);
    } 
    get {
      byte ret = NWNXLibPINVOKE.CExtendedServerInfo_m_nMinLevel_get(swigCPtr);
      return ret;
    } 
  }

  public byte m_nMaxLevel {
    set {
      NWNXLibPINVOKE.CExtendedServerInfo_m_nMaxLevel_set(swigCPtr, value);
    } 
    get {
      byte ret = NWNXLibPINVOKE.CExtendedServerInfo_m_nMaxLevel_get(swigCPtr);
      return ret;
    } 
  }

  public byte m_nPlayerCount {
    set {
      NWNXLibPINVOKE.CExtendedServerInfo_m_nPlayerCount_set(swigCPtr, value);
    } 
    get {
      byte ret = NWNXLibPINVOKE.CExtendedServerInfo_m_nPlayerCount_get(swigCPtr);
      return ret;
    } 
  }

  public byte m_nMaxPlayers {
    set {
      NWNXLibPINVOKE.CExtendedServerInfo_m_nMaxPlayers_set(swigCPtr, value);
    } 
    get {
      byte ret = NWNXLibPINVOKE.CExtendedServerInfo_m_nMaxPlayers_get(swigCPtr);
      return ret;
    } 
  }

  public CExoString m_sModuleName {
    set {
      NWNXLibPINVOKE.CExtendedServerInfo_m_sModuleName_set(swigCPtr, CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CExtendedServerInfo_m_sModuleName_get(swigCPtr);
      CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
      return ret;
    } 
  }

  public int m_bAllowLocalVaultChars {
    set {
      NWNXLibPINVOKE.CExtendedServerInfo_m_bAllowLocalVaultChars_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CExtendedServerInfo_m_bAllowLocalVaultChars_get(swigCPtr);
      return ret;
    } 
  }

  public int m_bPauseAndPlay {
    set {
      NWNXLibPINVOKE.CExtendedServerInfo_m_bPauseAndPlay_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CExtendedServerInfo_m_bPauseAndPlay_get(swigCPtr);
      return ret;
    } 
  }

  public int m_bMultiplayerEnabled {
    set {
      NWNXLibPINVOKE.CExtendedServerInfo_m_bMultiplayerEnabled_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CExtendedServerInfo_m_bMultiplayerEnabled_get(swigCPtr);
      return ret;
    } 
  }

  public byte m_nPVPSetting {
    set {
      NWNXLibPINVOKE.CExtendedServerInfo_m_nPVPSetting_set(swigCPtr, value);
    } 
    get {
      byte ret = NWNXLibPINVOKE.CExtendedServerInfo_m_nPVPSetting_get(swigCPtr);
      return ret;
    } 
  }

  public byte m_nExpansionPacksRequired {
    set {
      NWNXLibPINVOKE.CExtendedServerInfo_m_nExpansionPacksRequired_set(swigCPtr, value);
    } 
    get {
      byte ret = NWNXLibPINVOKE.CExtendedServerInfo_m_nExpansionPacksRequired_get(swigCPtr);
      return ret;
    } 
  }

  public CExoString m_sServerName {
    set {
      NWNXLibPINVOKE.CExtendedServerInfo_m_sServerName_set(swigCPtr, CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CExtendedServerInfo_m_sServerName_get(swigCPtr);
      CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
      return ret;
    } 
  }

  public CExoString m_sModuleDescription {
    set {
      NWNXLibPINVOKE.CExtendedServerInfo_m_sModuleDescription_set(swigCPtr, CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CExtendedServerInfo_m_sModuleDescription_get(swigCPtr);
      CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
      return ret;
    } 
  }

  public CExoString m_sGameDetails {
    set {
      NWNXLibPINVOKE.CExtendedServerInfo_m_sGameDetails_set(swigCPtr, CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CExtendedServerInfo_m_sGameDetails_get(swigCPtr);
      CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
      return ret;
    } 
  }

  public CExoString m_sBuild {
    set {
      NWNXLibPINVOKE.CExtendedServerInfo_m_sBuild_set(swigCPtr, CExoString.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CExtendedServerInfo_m_sBuild_get(swigCPtr);
      CExoString ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoString(cPtr, false);
      return ret;
    } 
  }

  public short m_nGameType {
    set {
      NWNXLibPINVOKE.CExtendedServerInfo_m_nGameType_set(swigCPtr, value);
    } 
    get {
      short ret = NWNXLibPINVOKE.CExtendedServerInfo_m_nGameType_get(swigCPtr);
      return ret;
    } 
  }

  public int m_bOnePartyOnly {
    set {
      NWNXLibPINVOKE.CExtendedServerInfo_m_bOnePartyOnly_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CExtendedServerInfo_m_bOnePartyOnly_get(swigCPtr);
      return ret;
    } 
  }

  public int m_bLegalChars {
    set {
      NWNXLibPINVOKE.CExtendedServerInfo_m_bLegalChars_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CExtendedServerInfo_m_bLegalChars_get(swigCPtr);
      return ret;
    } 
  }

  public int m_bItemRestrict {
    set {
      NWNXLibPINVOKE.CExtendedServerInfo_m_bItemRestrict_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CExtendedServerInfo_m_bItemRestrict_get(swigCPtr);
      return ret;
    } 
  }

  public CExtendedServerInfo __Assign(CNetLayerSessionInfo pIn) {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CExtendedServerInfo___Assign(swigCPtr, CNetLayerSessionInfo.getCPtr(pIn));
    CExtendedServerInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExtendedServerInfo(cPtr, false);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
