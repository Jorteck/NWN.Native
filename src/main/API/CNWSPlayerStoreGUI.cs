//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NWN.Native.API {

public class CNWSPlayerStoreGUI : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CNWSPlayerStoreGUI(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CNWSPlayerStoreGUI obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CNWSPlayerStoreGUI() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public uint m_oidOpen {
    set {
      NWNXLibPINVOKE.CNWSPlayerStoreGUI_m_oidOpen_set(swigCPtr, value);
    } 
    get {
      uint ret = NWNXLibPINVOKE.CNWSPlayerStoreGUI_m_oidOpen_get(swigCPtr);
      return ret;
    } 
  }

  public byte m_nSelectedPanel {
    set {
      NWNXLibPINVOKE.CNWSPlayerStoreGUI_m_nSelectedPanel_set(swigCPtr, value);
    } 
    get {
      byte ret = NWNXLibPINVOKE.CNWSPlayerStoreGUI_m_nSelectedPanel_get(swigCPtr);
      return ret;
    } 
  }

  public byte m_nSelectedPage {
    set {
      NWNXLibPINVOKE.CNWSPlayerStoreGUI_m_nSelectedPage_set(swigCPtr, value);
    } 
    get {
      byte ret = NWNXLibPINVOKE.CNWSPlayerStoreGUI_m_nSelectedPage_get(swigCPtr);
      return ret;
    } 
  }

  public Vector m_vOpenPosition {
    set {
      NWNXLibPINVOKE.CNWSPlayerStoreGUI_m_vOpenPosition_set(swigCPtr, Vector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CNWSPlayerStoreGUI_m_vOpenPosition_get(swigCPtr);
      Vector ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector(cPtr, false);
      return ret;
    } 
  }

  public CNWSPlayerStoreGUI() : this(NWNXLibPINVOKE.new_CNWSPlayerStoreGUI(), true) {
  }

  public void OpenStore(CNWSPlayer pPlayer, uint oidStore, char nMarkUp, char nMarkDown) {
    NWNXLibPINVOKE.CNWSPlayerStoreGUI_OpenStore__SWIG_0(swigCPtr, CNWSPlayer.getCPtr(pPlayer), oidStore, nMarkUp, nMarkDown);
  }

  public void OpenStore(CNWSPlayer pPlayer, uint oidStore, char nMarkUp) {
    NWNXLibPINVOKE.CNWSPlayerStoreGUI_OpenStore__SWIG_1(swigCPtr, CNWSPlayer.getCPtr(pPlayer), oidStore, nMarkUp);
  }

  public void OpenStore(CNWSPlayer pPlayer, uint oidStore) {
    NWNXLibPINVOKE.CNWSPlayerStoreGUI_OpenStore__SWIG_2(swigCPtr, CNWSPlayer.getCPtr(pPlayer), oidStore);
  }

  public void CloseStore(CNWSPlayer pPlayer, int bTellClient) {
    NWNXLibPINVOKE.CNWSPlayerStoreGUI_CloseStore__SWIG_0(swigCPtr, CNWSPlayer.getCPtr(pPlayer), bTellClient);
  }

  public void CloseStore(CNWSPlayer pPlayer) {
    NWNXLibPINVOKE.CNWSPlayerStoreGUI_CloseStore__SWIG_1(swigCPtr, CNWSPlayer.getCPtr(pPlayer));
  }

}

}
