//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NWN.Native.API {

public class CVirtualMachine : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CVirtualMachine(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CVirtualMachine obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CVirtualMachine() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NWNXLibPINVOKE.delete_CVirtualMachine(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public CScriptCompiler m_pJitCompiler {
    set {
      NWNXLibPINVOKE.CVirtualMachine_m_pJitCompiler_set(swigCPtr, CScriptCompiler.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CVirtualMachine_m_pJitCompiler_get(swigCPtr);
      CScriptCompiler ret = (cPtr == global::System.IntPtr.Zero) ? null : new CScriptCompiler(cPtr, false);
      return ret;
    } 
  }

  public int m_nReturnValueParameterType {
    set {
      NWNXLibPINVOKE.CVirtualMachine_m_nReturnValueParameterType_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CVirtualMachine_m_nReturnValueParameterType_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_void m_pReturnValue {
    set {
      NWNXLibPINVOKE.CVirtualMachine_m_pReturnValue_set(swigCPtr, SWIGTYPE_p_void.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CVirtualMachine_m_pReturnValue_get(swigCPtr);
      SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
      return ret;
    } 
  }

  public uint m_nInstructionsExecuted {
    set {
      NWNXLibPINVOKE.CVirtualMachine_m_nInstructionsExecuted_set(swigCPtr, value);
    } 
    get {
      uint ret = NWNXLibPINVOKE.CVirtualMachine_m_nInstructionsExecuted_get(swigCPtr);
      return ret;
    } 
  }

  public int m_nRecursionLevel {
    set {
      NWNXLibPINVOKE.CVirtualMachine_m_nRecursionLevel_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CVirtualMachine_m_nRecursionLevel_get(swigCPtr);
      return ret;
    } 
  }

  public CVirtualMachineScript m_pVirtualMachineScript {
    set {
      NWNXLibPINVOKE.CVirtualMachine_m_pVirtualMachineScript_set(swigCPtr, CVirtualMachineScript.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CVirtualMachine_m_pVirtualMachineScript_get(swigCPtr);
      CVirtualMachineScript ret = (cPtr == global::System.IntPtr.Zero) ? null : new CVirtualMachineScript(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int m_bValidObjectRunScript {
    set {
      NWNXLibPINVOKE.CVirtualMachine_m_bValidObjectRunScript_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CVirtualMachine_m_bValidObjectRunScript_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned_int m_oidObjectRunScript {
    set {
      NWNXLibPINVOKE.CVirtualMachine_m_oidObjectRunScript_set(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CVirtualMachine_m_oidObjectRunScript_get(swigCPtr);
      SWIGTYPE_p_unsigned_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
      return ret;
    } 
  }

  public CExoArrayListScriptParam m_lScriptParams {
    set {
      NWNXLibPINVOKE.CVirtualMachine_m_lScriptParams_set(swigCPtr, CExoArrayListScriptParam.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CVirtualMachine_m_lScriptParams_get(swigCPtr);
      CExoArrayListScriptParam ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoArrayListScriptParam(cPtr, false);
      return ret;
    } 
  }

  public CVirtualMachineStack m_cRunTimeStack {
    set {
      NWNXLibPINVOKE.CVirtualMachine_m_cRunTimeStack_set(swigCPtr, CVirtualMachineStack.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CVirtualMachine_m_cRunTimeStack_get(swigCPtr);
      CVirtualMachineStack ret = (cPtr == global::System.IntPtr.Zero) ? null : new CVirtualMachineStack(cPtr, false);
      return ret;
    } 
  }

  public int m_nInstructPtrLevel {
    set {
      NWNXLibPINVOKE.CVirtualMachine_m_nInstructPtrLevel_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CVirtualMachine_m_nInstructPtrLevel_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_int m_pnRunTimeInstructPtr {
    set {
      NWNXLibPINVOKE.CVirtualMachine_m_pnRunTimeInstructPtr_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CVirtualMachine_m_pnRunTimeInstructPtr_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public int m_nSecondaryInstructionPointer {
    set {
      NWNXLibPINVOKE.CVirtualMachine_m_nSecondaryInstructionPointer_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CVirtualMachine_m_nSecondaryInstructionPointer_get(swigCPtr);
      return ret;
    } 
  }

  public int m_nStackSizeToSave {
    set {
      NWNXLibPINVOKE.CVirtualMachine_m_nStackSizeToSave_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CVirtualMachine_m_nStackSizeToSave_get(swigCPtr);
      return ret;
    } 
  }

  public int m_nBaseStackSizeToSave {
    set {
      NWNXLibPINVOKE.CVirtualMachine_m_nBaseStackSizeToSave_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CVirtualMachine_m_nBaseStackSizeToSave_get(swigCPtr);
      return ret;
    } 
  }

  public CVirtualMachineCmdImplementer m_pCmdImplementer {
    set {
      NWNXLibPINVOKE.CVirtualMachine_m_pCmdImplementer_set(swigCPtr, CVirtualMachineCmdImplementer.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CVirtualMachine_m_pCmdImplementer_get(swigCPtr);
      CVirtualMachineCmdImplementer ret = (cPtr == global::System.IntPtr.Zero) ? null : new CVirtualMachineCmdImplementer(cPtr, false);
      return ret;
    } 
  }

  public int m_bDebugGUIRequired {
    set {
      NWNXLibPINVOKE.CVirtualMachine_m_bDebugGUIRequired_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CVirtualMachine_m_bDebugGUIRequired_get(swigCPtr);
      return ret;
    } 
  }

  public int m_bDebuggerSpawned {
    set {
      NWNXLibPINVOKE.CVirtualMachine_m_bDebuggerSpawned_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CVirtualMachine_m_bDebuggerSpawned_get(swigCPtr);
      return ret;
    } 
  }

  public CVirtualMachineFile m_cVMFile {
    set {
      NWNXLibPINVOKE.CVirtualMachine_m_cVMFile_set(swigCPtr, CVirtualMachineFile.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CVirtualMachine_m_cVMFile_get(swigCPtr);
      CVirtualMachineFile ret = (cPtr == global::System.IntPtr.Zero) ? null : new CVirtualMachineFile(cPtr, false);
      return ret;
    } 
  }

  public CScriptLog m_pLog {
    set {
      NWNXLibPINVOKE.CVirtualMachine_m_pLog_set(swigCPtr, CScriptLog.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CVirtualMachine_m_pLog_get(swigCPtr);
      CScriptLog ret = (cPtr == global::System.IntPtr.Zero) ? null : new CScriptLog(cPtr, false);
      return ret;
    } 
  }

  public CExoArrayListCScriptLogPtr m_aScriptLog {
    set {
      NWNXLibPINVOKE.CVirtualMachine_m_aScriptLog_set(swigCPtr, CExoArrayListCScriptLogPtr.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CVirtualMachine_m_aScriptLog_get(swigCPtr);
      CExoArrayListCScriptLogPtr ret = (cPtr == global::System.IntPtr.Zero) ? null : new CExoArrayListCScriptLogPtr(cPtr, false);
      return ret;
    } 
  }

  public int m_bEnableScriptLogging {
    set {
      NWNXLibPINVOKE.CVirtualMachine_m_bEnableScriptLogging_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CVirtualMachine_m_bEnableScriptLogging_get(swigCPtr);
      return ret;
    } 
  }

  public int m_bEnableScriptProfiling {
    set {
      NWNXLibPINVOKE.CVirtualMachine_m_bEnableScriptProfiling_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CVirtualMachine_m_bEnableScriptProfiling_get(swigCPtr);
      return ret;
    } 
  }

  public uint m_nScriptStartTime {
    set {
      NWNXLibPINVOKE.CVirtualMachine_m_nScriptStartTime_set(swigCPtr, value);
    } 
    get {
      uint ret = NWNXLibPINVOKE.CVirtualMachine_m_nScriptStartTime_get(swigCPtr);
      return ret;
    } 
  }

  public uint m_nScriptEndTime {
    set {
      NWNXLibPINVOKE.CVirtualMachine_m_nScriptEndTime_set(swigCPtr, value);
    } 
    get {
      uint ret = NWNXLibPINVOKE.CVirtualMachine_m_nScriptEndTime_get(swigCPtr);
      return ret;
    } 
  }

  public uint m_nInstructionLimit {
    set {
      NWNXLibPINVOKE.CVirtualMachine_m_nInstructionLimit_set(swigCPtr, value);
    } 
    get {
      uint ret = NWNXLibPINVOKE.CVirtualMachine_m_nInstructionLimit_get(swigCPtr);
      return ret;
    } 
  }

  public CVirtualMachine() : this(NWNXLibPINVOKE.new_CVirtualMachine(), true) {
  }

  public int RunScript(CExoString psFileName, uint oid, int bOidValid) {
    int ret = NWNXLibPINVOKE.CVirtualMachine_RunScript__SWIG_0(swigCPtr, CExoString.getCPtr(psFileName), oid, bOidValid);
    return ret;
  }

  public int RunScript(CExoString psFileName, uint oid) {
    int ret = NWNXLibPINVOKE.CVirtualMachine_RunScript__SWIG_1(swigCPtr, CExoString.getCPtr(psFileName), oid);
    return ret;
  }

  public int RunScriptChunk(CExoString sScriptChunk, uint oid, int bOidValid, int bWrapIntoMain) {
    int ret = NWNXLibPINVOKE.CVirtualMachine_RunScriptChunk__SWIG_0(swigCPtr, CExoString.getCPtr(sScriptChunk), oid, bOidValid, bWrapIntoMain);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int RunScriptChunk(CExoString sScriptChunk, uint oid, int bOidValid) {
    int ret = NWNXLibPINVOKE.CVirtualMachine_RunScriptChunk__SWIG_1(swigCPtr, CExoString.getCPtr(sScriptChunk), oid, bOidValid);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int RunScriptChunk(CExoString sScriptChunk, uint oid) {
    int ret = NWNXLibPINVOKE.CVirtualMachine_RunScriptChunk__SWIG_2(swigCPtr, CExoString.getCPtr(sScriptChunk), oid);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int RunScriptSituation(SWIGTYPE_p_void pScriptSituation, uint oid, int bOidValid) {
    int ret = NWNXLibPINVOKE.CVirtualMachine_RunScriptSituation__SWIG_0(swigCPtr, SWIGTYPE_p_void.getCPtr(pScriptSituation), oid, bOidValid);
    return ret;
  }

  public int RunScriptSituation(SWIGTYPE_p_void pScriptSituation, uint oid) {
    int ret = NWNXLibPINVOKE.CVirtualMachine_RunScriptSituation__SWIG_1(swigCPtr, SWIGTYPE_p_void.getCPtr(pScriptSituation), oid);
    return ret;
  }

  public int GetRunScriptReturnValue(SWIGTYPE_p_int nParameterType, SWIGTYPE_p_p_void pParameter) {
    int ret = NWNXLibPINVOKE.CVirtualMachine_GetRunScriptReturnValue(swigCPtr, SWIGTYPE_p_int.getCPtr(nParameterType), SWIGTYPE_p_p_void.getCPtr(pParameter));
    return ret;
  }

  public void SetDebugGUIFlag(int bValue) {
    NWNXLibPINVOKE.CVirtualMachine_SetDebugGUIFlag(swigCPtr, bValue);
  }

  public void SetScriptParameters(CExoArrayListScriptParam lParameters) {
    NWNXLibPINVOKE.CVirtualMachine_SetScriptParameters(swigCPtr, CExoArrayListScriptParam.getCPtr(lParameters));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public CExoString GetScriptParameter(CExoString paramName) {
    CExoString ret = new CExoString(NWNXLibPINVOKE.CVirtualMachine_GetScriptParameter(swigCPtr, CExoString.getCPtr(paramName)), true);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetScriptParameter(CExoString paramName, CExoString paramValue) {
    NWNXLibPINVOKE.CVirtualMachine_SetScriptParameter(swigCPtr, CExoString.getCPtr(paramName), CExoString.getCPtr(paramValue));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetCommandImplementer(CVirtualMachineCmdImplementer pImplementer) {
    NWNXLibPINVOKE.CVirtualMachine_SetCommandImplementer(swigCPtr, CVirtualMachineCmdImplementer.getCPtr(pImplementer));
  }

  public int StackPopInteger(SWIGTYPE_p_int nInteger) {
    int ret = NWNXLibPINVOKE.CVirtualMachine_StackPopInteger(swigCPtr, SWIGTYPE_p_int.getCPtr(nInteger));
    return ret;
  }

  public int StackPushInteger(int nInteger) {
    int ret = NWNXLibPINVOKE.CVirtualMachine_StackPushInteger(swigCPtr, nInteger);
    return ret;
  }

  public int StackPopFloat(SWIGTYPE_p_float fFloat) {
    int ret = NWNXLibPINVOKE.CVirtualMachine_StackPopFloat(swigCPtr, SWIGTYPE_p_float.getCPtr(fFloat));
    return ret;
  }

  public int StackPushFloat(float fFloat) {
    int ret = NWNXLibPINVOKE.CVirtualMachine_StackPushFloat(swigCPtr, fFloat);
    return ret;
  }

  public int StackPopVector(Vector vVector) {
    int ret = NWNXLibPINVOKE.CVirtualMachine_StackPopVector(swigCPtr, Vector.getCPtr(vVector));
    return ret;
  }

  public int StackPushVector(Vector vVector) {
    int ret = NWNXLibPINVOKE.CVirtualMachine_StackPushVector(swigCPtr, Vector.getCPtr(vVector));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int StackPopString(CExoString sString) {
    int ret = NWNXLibPINVOKE.CVirtualMachine_StackPopString(swigCPtr, CExoString.getCPtr(sString));
    return ret;
  }

  public int StackPushString(CExoString sString) {
    int ret = NWNXLibPINVOKE.CVirtualMachine_StackPushString(swigCPtr, CExoString.getCPtr(sString));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int StackPopObject(SWIGTYPE_p_unsigned_int poidObjectId) {
    int ret = NWNXLibPINVOKE.CVirtualMachine_StackPopObject(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(poidObjectId));
    return ret;
  }

  public int StackPushObject(uint oidObjectId) {
    int ret = NWNXLibPINVOKE.CVirtualMachine_StackPushObject(swigCPtr, oidObjectId);
    return ret;
  }

  public int StackPopEngineStructure(int nEngineStructure, SWIGTYPE_p_p_void ppEngineStructure) {
    int ret = NWNXLibPINVOKE.CVirtualMachine_StackPopEngineStructure(swigCPtr, nEngineStructure, SWIGTYPE_p_p_void.getCPtr(ppEngineStructure));
    return ret;
  }

  public int StackPushEngineStructure(int nEngineStructure, SWIGTYPE_p_void pEngineStructure) {
    int ret = NWNXLibPINVOKE.CVirtualMachine_StackPushEngineStructure(swigCPtr, nEngineStructure, SWIGTYPE_p_void.getCPtr(pEngineStructure));
    return ret;
  }

  public void DeleteScriptSituation(SWIGTYPE_p_void pScript) {
    NWNXLibPINVOKE.CVirtualMachine_DeleteScriptSituation(swigCPtr, SWIGTYPE_p_void.getCPtr(pScript));
  }

  public int ExecuteCode(SWIGTYPE_p_int nInstructionPointer, SWIGTYPE_p_DataBlockRef pCode, CVirtualMachineDebuggingContext pDebugContext) {
    int ret = NWNXLibPINVOKE.CVirtualMachine_ExecuteCode__SWIG_0(swigCPtr, SWIGTYPE_p_int.getCPtr(nInstructionPointer), SWIGTYPE_p_DataBlockRef.getCPtr(pCode), CVirtualMachineDebuggingContext.getCPtr(pDebugContext));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int ExecuteCode(SWIGTYPE_p_int nInstructionPointer, SWIGTYPE_p_DataBlockRef pCode) {
    int ret = NWNXLibPINVOKE.CVirtualMachine_ExecuteCode__SWIG_1(swigCPtr, SWIGTYPE_p_int.getCPtr(nInstructionPointer), SWIGTYPE_p_DataBlockRef.getCPtr(pCode));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int Test_RunAllScriptsInDirectory(CExoString sRunDirectoryAlias) {
    int ret = NWNXLibPINVOKE.CVirtualMachine_Test_RunAllScriptsInDirectory(swigCPtr, CExoString.getCPtr(sRunDirectoryAlias));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int DeleteScript(CVirtualMachineScript pScript) {
    int ret = NWNXLibPINVOKE.CVirtualMachine_DeleteScript(swigCPtr, CVirtualMachineScript.getCPtr(pScript));
    return ret;
  }

  public void InitializeScript(CVirtualMachineScript pScript, SWIGTYPE_p_DataBlockRef pData) {
    NWNXLibPINVOKE.CVirtualMachine_InitializeScript(swigCPtr, CVirtualMachineScript.getCPtr(pScript), SWIGTYPE_p_DataBlockRef.getCPtr(pData));
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public int PopInstructionPtr(SWIGTYPE_p_int nInstructionPointer) {
    int ret = NWNXLibPINVOKE.CVirtualMachine_PopInstructionPtr(swigCPtr, SWIGTYPE_p_int.getCPtr(nInstructionPointer));
    return ret;
  }

  public int PushInstructionPtr(int nInstructionPointer) {
    int ret = NWNXLibPINVOKE.CVirtualMachine_PushInstructionPtr(swigCPtr, nInstructionPointer);
    return ret;
  }

  public int ReadScriptFile(CExoString sFileName) {
    int ret = NWNXLibPINVOKE.CVirtualMachine_ReadScriptFile(swigCPtr, CExoString.getCPtr(sFileName));
    return ret;
  }

  public int RunScriptFile(int nInstructionPointer) {
    int ret = NWNXLibPINVOKE.CVirtualMachine_RunScriptFile(swigCPtr, nInstructionPointer);
    return ret;
  }

  public int SetUpJITCompiledScript(CExoString sScriptChunk, int bWrapIntoMain) {
    int ret = NWNXLibPINVOKE.CVirtualMachine_SetUpJITCompiledScript(swigCPtr, CExoString.getCPtr(sScriptChunk), bWrapIntoMain);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int SetUpScriptSituation(CVirtualMachineScript pScript) {
    int ret = NWNXLibPINVOKE.CVirtualMachine_SetUpScriptSituation(swigCPtr, CVirtualMachineScript.getCPtr(pScript));
    return ret;
  }

  public void Debugger(SWIGTYPE_p_int pnCurrentInstructionPointer) {
    NWNXLibPINVOKE.CVirtualMachine_Debugger(swigCPtr, SWIGTYPE_p_int.getCPtr(pnCurrentInstructionPointer));
  }

  public int StackPopCommand_Internal(SWIGTYPE_p_p_CVirtualMachineScript pScript) {
    int ret = NWNXLibPINVOKE.CVirtualMachine_StackPopCommand_Internal(swigCPtr, SWIGTYPE_p_p_CVirtualMachineScript.getCPtr(pScript));
    return ret;
  }

  public int SaveScriptSituation_Internal(CVirtualMachineScript pScript, CResGFF pRes, CResStruct pStruct) {
    int ret = NWNXLibPINVOKE.CVirtualMachine_SaveScriptSituation_Internal(swigCPtr, CVirtualMachineScript.getCPtr(pScript), CResGFF.getCPtr(pRes), CResStruct.getCPtr(pStruct));
    return ret;
  }

  public int LoadScriptSituation_Internal(SWIGTYPE_p_p_CVirtualMachineScript pScript, CResGFF pRes, CResStruct pStruct) {
    int ret = NWNXLibPINVOKE.CVirtualMachine_LoadScriptSituation_Internal(swigCPtr, SWIGTYPE_p_p_CVirtualMachineScript.getCPtr(pScript), CResGFF.getCPtr(pRes), CResStruct.getCPtr(pStruct));
    return ret;
  }

  public CScriptLog GetScriptLog(CExoString sScript) {
    global::System.IntPtr cPtr = NWNXLibPINVOKE.CVirtualMachine_GetScriptLog(swigCPtr, CExoString.getCPtr(sScript));
    CScriptLog ret = (cPtr == global::System.IntPtr.Zero) ? null : new CScriptLog(cPtr, false);
    if (NWNXLibPINVOKE.SWIGPendingException.Pending) throw NWNXLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
