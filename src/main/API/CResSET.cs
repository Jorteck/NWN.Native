//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NWN.Native.API {

public unsafe class CResSET : CRes {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CResSET(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NWNXLibPINVOKE.CResSET_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CResSET obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NWNXLibPINVOKE.delete_CResSET(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }
/*@SWIG:/__w/NWN.Native/NWN.Native/nwnx/Plugins/SWIG/SWIG_DotNET/API_NWNXLib.i,25,SWIG_DOTNET_EXTENSIONS@*/
  public global::System.IntPtr Pointer {
    get {
      return swigCPtr.Handle;
    }
  }

  public static unsafe implicit operator void*(CResSET self) {
    return (void*)self.swigCPtr.Handle;
  }

  public static unsafe CResSET FromPointer(void* pointer, bool memoryOwn = false) {
    return pointer != null ? new CResSET((global::System.IntPtr)pointer, memoryOwn) : null;
  }

  public static CResSET FromPointer(global::System.IntPtr pointer, bool memoryOwn = false) {
    return pointer != global::System.IntPtr.Zero ? new CResSET(pointer, memoryOwn) : null;
  }

  public bool Equals(CResSET other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }

    if (ReferenceEquals(this, other)) {
      return true;
    }

    return Pointer.Equals(other.Pointer);
  }

  public override bool Equals(object obj) {
    return ReferenceEquals(this, obj) || obj is CResSET other && Equals(other);
  }

  public override int GetHashCode() {
    return swigCPtr.Handle.GetHashCode();
  }

  public static bool operator ==(CResSET left, CResSET right) {
    return Equals(left, right);
  }

  public static bool operator !=(CResSET left, CResSET right) {
    return !Equals(left, right);
  }
/*@SWIG@*/
  public int m_bLoaded {
    set {
      NWNXLibPINVOKE.CResSET_m_bLoaded_set(swigCPtr, value);
    } 
    get {
      int ret = NWNXLibPINVOKE.CResSET_m_bLoaded_get(swigCPtr);
      return ret;
    } 
  }

  public uint m_nSETNormalSize {
    set {
      NWNXLibPINVOKE.CResSET_m_nSETNormalSize_set(swigCPtr, value);
    } 
    get {
      uint ret = NWNXLibPINVOKE.CResSET_m_nSETNormalSize_get(swigCPtr);
      return ret;
    } 
  }

  public SETSection m_pSection {
    set {
      NWNXLibPINVOKE.CResSET_m_pSection_set(swigCPtr, SETSection.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NWNXLibPINVOKE.CResSET_m_pSection_get(swigCPtr);
      SETSection ret = (cPtr == global::System.IntPtr.Zero) ? null : new SETSection(cPtr, false);
      return ret;
    } 
  }

  public uint m_nNumSections {
    set {
      NWNXLibPINVOKE.CResSET_m_nNumSections_set(swigCPtr, value);
    } 
    get {
      uint ret = NWNXLibPINVOKE.CResSET_m_nNumSections_get(swigCPtr);
      return ret;
    } 
  }

  public byte* m_sNullTerminated {
    set {
      NWNXLibPINVOKE.CResSET_m_sNullTerminated_set(swigCPtr, (global::System.IntPtr)value);
    } 
    get {
        global::System.IntPtr retVal = NWNXLibPINVOKE.CResSET_m_sNullTerminated_get(swigCPtr);
        return (byte*)retVal;
    }

  }

  public CResSET() : this(NWNXLibPINVOKE.new_CResSET(), true) {
  }

  public int CopySETData(byte* pSETData) {
    int ret = NWNXLibPINVOKE.CResSET_CopySETData(swigCPtr, (global::System.IntPtr)pSETData);
    return ret;
  }

  public byte* GetSETDataPtr() {
    global::System.IntPtr retVal = NWNXLibPINVOKE.CResSET_GetSETDataPtr(swigCPtr);
    return (byte*)retVal;
  }

  public uint GetSETSize() {
    uint ret = NWNXLibPINVOKE.CResSET_GetSETSize(swigCPtr);
    return ret;
  }

  public int IsLoaded() {
    int ret = NWNXLibPINVOKE.CResSET_IsLoaded(swigCPtr);
    return ret;
  }

  public override int OnResourceFreed() {
    int ret = NWNXLibPINVOKE.CResSET_OnResourceFreed(swigCPtr);
    return ret;
  }

  public override int OnResourceServiced() {
    int ret = NWNXLibPINVOKE.CResSET_OnResourceServiced(swigCPtr);
    return ret;
  }

  public void GetSectionEntryValue(byte* szSection, byte* szEntry, byte* szValue) {
    NWNXLibPINVOKE.CResSET_GetSectionEntryValue(swigCPtr, (global::System.IntPtr)szSection, (global::System.IntPtr)szEntry, (global::System.IntPtr)szValue);
  }

  public int CreateSectionTable() {
    int ret = NWNXLibPINVOKE.CResSET_CreateSectionTable(swigCPtr);
    return ret;
  }

  public byte* GetNextLine(uint nOffsetStart, uint* pOffsetEnd) {
    global::System.IntPtr retVal = NWNXLibPINVOKE.CResSET_GetNextLine(swigCPtr, nOffsetStart, (global::System.IntPtr)pOffsetEnd);
    return (byte*)retVal;
  }

  public byte* SkipWhiteSpace(byte* pLine) {
    global::System.IntPtr retVal = NWNXLibPINVOKE.CResSET_SkipWhiteSpace(swigCPtr, (global::System.IntPtr)pLine);
    return (byte*)retVal;
  }

}

}
